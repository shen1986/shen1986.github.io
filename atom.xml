<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小沈的个人博客</title>
  
  <subtitle>发表文章，自己的想法，学习分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shenxf.top/"/>
  <updated>2019-06-10T06:16:46.862Z</updated>
  <id>http://shenxf.top/</id>
  
  <author>
    <name>小沈</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript_可维护_编写可维护的JavaScript</title>
    <link href="http://shenxf.top/2019/06/10/20190610-MaintainableJavaScript/"/>
    <id>http://shenxf.top/2019/06/10/20190610-MaintainableJavaScript/</id>
    <published>2019-06-10T06:15:12.000Z</published>
    <updated>2019-06-10T06:16:46.862Z</updated>
    
    <content type="html"><![CDATA[<p>边看书边做笔记，这个仓库主要是参照《编写可维护的JavaScript》这本书，来总结自己的学习笔记。<br>只是自己的总结，和书本不一样，如果觉得不错，你可以购买这本书自己研究。书本还涉及到JSLint，JSHint<br>中的区别。实例代码从哪里取材，各种组织或公司的代码风格，并进行比较以及总结。对于某些写法的观点有时有些模棱两可，我自己的总结没有这些东西，更偏向与自己怎么写。</p><p>最后，我写这篇东西也不容易，如果感觉不错，请点<code>Star</code>,谢谢大家。</p><h2 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h2><ol><li><p>基本的格式化</p><ul><li><a href="#缩进层级">缩进层级</a></li><li><a href="#语句结尾">语句结尾</a></li><li><a href="#行的长度">行的长度</a></li><li><a href="#换行">换行</a></li><li><a href="#空行">空行</a></li><li><a href="#命名">命名</a><ul><li><a href="#变量和函数">变量和函数</a></li><li><a href="#常量">常量</a></li><li><a href="#构造函数">构造函数</a></li></ul></li><li><a href="#直接量">直接量</a><ul><li><a href="#字符串">字符串</a></li><li><a href="#数字">数字</a></li><li><a href="#null">null</a></li><li><a href="#undefined">undefined</a></li><li><a href="#对象直接量">对象直接量</a></li><li><a href="#数组直接量">数组直接量</a></li></ul></li></ul></li><li><p>注释</p><ul><li><a href="#单行注释">单行注释</a></li><li><a href="#多行注释">多行注释</a></li><li><a href="#使用注释">使用注释</a><ul><li><a href="#难以理解的代码">难以理解的代码</a></li><li><a href="#可能被误认为错误的代码">可能被误认为错误的代码</a></li><li><a href="#游览器特性hack">游览器特性hack</a></li></ul></li><li><a href="#文档注释">文档注释</a></li></ul></li><li><p>语句和表达式</p><ul><li><a href="#花括号的对齐方式">花括号的对齐方式</a></li><li><a href="#块语句的间隔">块语句的间隔</a></li><li><a href="#switch语句">switch语句</a><ul><li><a href="#缩进">缩进</a></li><li><a href="#case语句的连续执行">case语句的“连续执行”</a></li><li><a href="#default">default</a></li></ul></li><li><a href="#with语句">with语句</a></li><li><a href="#for循环">for循环</a></li><li><a href="#for-in循环">for-in循环</a></li></ul></li><li><p>变量、函数和运算符</p><ul><li><a href="#变量声明">变量声明</a></li><li><a href="#函数声明">函数声明</a></li><li><a href="#函数调用间隔">函数调用间隔</a></li><li><a href="#立即调用的函数">立即调用的函数</a></li><li><a href="#严格模式">严格模式</a></li><li><a href="#相等">相等</a></li></ul></li></ol><h3 id="缩进层级"><a href="#缩进层级" class="headerlink" title="缩进层级"></a>缩进层级</h3><ul><li>缩进层级非常重要，弄的不好，容易造成很多误解。<br>下这段代码 (为了演示,.这里故意修改了示例代码的缩进〕。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (wl &amp;&amp; wl.length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, <span class="number">1</span> = wl.length; i &lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        p = wl[i];</span><br><span class="line">        type = Y.Lang.type(r[p]);</span><br><span class="line">        <span class="keyword">if</span> (s.hasOwnProperty(p)) &#123; <span class="keyword">if</span> (merge &amp;&amp; type == <span class="string">'object'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    Y.mix(r(p], s&#123;p]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ov || !(p <span class="keyword">in</span> r)) &#123;</span><br><span class="line">                    r[p] = s[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>快速读憧这段代码井不容易。 这里的缩进并不统一,一眼看去 else 是对应到第 1<br>行的if语句。 但实际上这个 else 和代码第 5行的if语句相对应。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (wl &amp;&amp; wl.length) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, <span class="number">1</span> = wl.length; i &lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        p = wl[i];</span><br><span class="line">        type = Y.Lang.type(r[p]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.hasOwnProperty(p)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (merge &amp;&amp; type == <span class="string">'object'</span>) &#123;</span><br><span class="line">                Y.mix(r[p], s[p]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ov || !(p <span class="keyword">in</span> r)) &#123;</span><br><span class="line">                r[p] = s[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>有两种主张</p><ul><li>使用制表符进行缩进<ul><li>就是[tab]进行缩进</li></ul></li><li>使用空格进行缩进<ul><li>一般是以4个空格进行缩进</li></ul></li></ul></li><li><p>以上两种方法都可以，但是不要两种方法混用。</p></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="语句结尾"><a href="#语句结尾" class="headerlink" title="语句结尾"></a>语句结尾</h3><ul><li>在javascript里面可以不以分号结尾。分析器会自动在结尾加上分号。</li><li>但是不推荐这种做法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">"Maintainable JavaScript"</span>,</span><br><span class="line">        author: <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析器会将它理解成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">"Maintainable JavaScript"</span>,</span><br><span class="line">        author: <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上面的例子来讲，函数将返回一个undefined，这不是我们要的结果。<br>虽然可以将 <code>{</code> 放到 <code>return</code> 之后，但是分析器的判断比较复杂，不能保证我们<br>能考虑到所有的情况。</li><li><p>所有我们应该更加倾向于使用它们，而不是省略它们。</p></li><li><p>上面是书的作者的看法，我确实看到一种风格是结尾一律不加分号，这种写法要求在语句是以<code>[</code>,<code>(</code>,`开头的时候，在前面加上分号。</p></li><li>而且推荐这种做法的人认为，不加分号反而不容易出错。像类似于上面的错误是不会被忽略到上线阶段的，当你创建了一个方法，没有得到你想要的结果，应该在开发的时候就立即被发现了。</li><li>就算使用了加了分号的规范，有时也会因为不小心而漏掉（用检测工具的没有这个问题）</li><li><p>最后，使用的第三方代码不一定是加分号的风格。有可能还是不得不在第一个位置加上分号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这些语句与上一句没有分号的语句连接的话会直接报错，所以必须加分号</span></span><br><span class="line"></span><br><span class="line">;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].foreach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 处理内容</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">;<span class="string">`shenxf<span class="subst">$&#123;nickname&#125;</span>`</span>.length</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很多代码都习惯于在圆括号之前加一个分号，这是由于之前引入的代码可能有漏了分号的情况，</span></span><br><span class="line"><span class="comment">// 为了以防万一，都会有类似于下面的代码。</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 处理内容。</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>我比较喜欢不省略分号，如果想采用省略分号的规范，切记在<code>[</code>,<code>(</code>,`之前加上分号。</p></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="行的长度"><a href="#行的长度" class="headerlink" title="行的长度"></a>行的长度</h3><ul><li>如果一行的内容太长，编辑窗口就会出现滚动条。这样不利于我们查看代码，也比较变扭。<br>我们应该规定我们一行的长度不要超过80个字符。超过80个字符应该折行。这是因为很多编辑器是<br>在80个字符以后出现滚动条</li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul><li>当一行的长度太长我们就会进行折行。通常要在运算符后面换行，这是因为分析器不会再运算符后面自动加分号。<br>不容易出错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法：在运算符后面换行。 第二行追加二个缩进</span></span><br><span class="line">callAFunction(<span class="built_in">document</span>, element, <span class="built_in">window</span>, <span class="string">"some string value"</span>, <span class="literal">true</span>, <span class="number">123</span>,</span><br><span class="line">        navigator);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的做法第二行只有一个缩进</span></span><br><span class="line">callAFunction(<span class="built_in">document</span>, element, <span class="built_in">window</span>, <span class="string">"some string value"</span>, <span class="literal">true</span>, <span class="number">123</span>,</span><br><span class="line">    navigator);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的做法运算符之前换行了</span></span><br><span class="line">callAFunction(<span class="built_in">document</span>, element, <span class="built_in">window</span>, <span class="string">"some string value"</span>, <span class="literal">true</span>, <span class="number">123</span></span><br><span class="line">    , navigator);</span><br></pre></td></tr></table></figure><ul><li>为什么要二个缩进</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isLeapYear &amp;&amp; isFebruary &amp;&amp; day &amp;&amp; day ==<span class="number">29</span> &amp;&amp; itsYourBirthdady &amp;&amp;</span><br><span class="line">        noPlans) &#123;</span><br><span class="line">    </span><br><span class="line">    waitAnotherFourYears();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从上面的代码可以看出，二个缩进正好和条件内部语句的一个缩进错开，这样更容易阅读。</li><li>但是有一个例外。在赋值语句后面的第二行位置最好要对齐</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = something + anotherThing + yetAnotherThing + someThingElse +</span><br><span class="line">             anotherSomethingElse;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul><li>空行常常被忽略，代码看起来应该像一段一段可读的代码，而不是全部糅合在一块。拿缩进层级的例子来说</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (wl &amp;&amp; wl.length) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, <span class="number">1</span> = wl.length; i &lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        p = wl[i];</span><br><span class="line">        type = Y.Lang.type(r[p]);</span><br><span class="line">        <span class="keyword">if</span> (s.hasOwnProperty(p)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (merge &amp;&amp; type == <span class="string">'object'</span>) &#123;</span><br><span class="line">                Y.mix(r[p], s[p]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ov || !(p <span class="keyword">in</span> r)) &#123;</span><br><span class="line">                r[p] = s[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给这段代码加上空行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (wl &amp;&amp; wl.length) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, <span class="number">1</span> = wl.length; i &lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        p = wl[i];</span><br><span class="line">        type = Y.Lang.type(r[p]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.hasOwnProperty(p)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (merge &amp;&amp; type == <span class="string">'object'</span>) &#123;</span><br><span class="line">                Y.mix(r[p], s[p]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ov || !(p <span class="keyword">in</span> r)) &#123;</span><br><span class="line">                r[p] = s[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样看上去能够更加流畅的阅读，一般来讲下面的场景添加空行是不错的注意<ul><li>在方法之间。</li><li>在方法中的局部变量和第一条语句之间。</li><li>在多行或则单行注释之前。</li><li>在方法的逻辑片段之间插入空行，提高可读性。</li></ul></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li>JavaScript语言核心是ECMAScript，遵照了驼峰式大小写命名法（这个太有名了我就不解释了）</li><li>一般是遵循语言核心所采用的命名规范，因此大部分JavaScript程序员使用驼峰命名法给变量和函数命名。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="变量和函数"><a href="#变量和函数" class="headerlink" title="变量和函数"></a>变量和函数</h4><ul><li>变量的命名前缀应该是名词，这能后和函数的命名规则区分开，函数应该以动词来做前缀。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">"shenxf"</span>;</span><br><span class="line"><span class="keyword">var</span> found = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法: 变量看起来像函数</span></span><br><span class="line"><span class="keyword">var</span> getCount = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> isFound = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> myName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> myName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>命名应该要尽量短小精干，例如，count，length和size一看就知道是数字类型，name，title，和message一看就知道是字符串类型</li><li>i，j，k通常在循环处理中使用。</li><li><p>要经量避免写无意义的命名。</p></li><li><p>对于方法的命名，第一个单词应该是动词。下面是一些常见的约定</p></li></ul><table><thead><tr><th>动词</th><th>含义 </th></tr></thead><tbody><tr><td>can</td><td>函数返回一个布尔值</td></tr><tr><td>has</td><td>函数返回一个布尔值</td></tr><tr><td>is</td><td>函数返回一个布尔值</td></tr><tr><td>get</td><td>函数返回一个非布尔值</td></tr><tr><td>set</td><td>函数用来保存一个值</td></tr></tbody></table><ul><li>按照上面的写法，可读性会很好</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEnabled()) &#123;</span><br><span class="line">    setName(<span class="string">"shenxf"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getName() === <span class="string">"shenxf"</span>) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li>在ECMAScript6之前，JavaScript没有真正常量的概念。为了区分普通的变量和常量，<br>用类似于C语言方法来命名，用大写字母和下划线来命名，下划线是用来分隔单词的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MAX_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">"http://shenxf.top"</span>;</span><br></pre></td></tr></table></figure><ul><li>来看一下代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (count &lt; MAX_COUNT) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul><li>构造函数遵照大驼峰命名法。主要是为了和函数与变量的命名法进行区分。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person(<span class="string">"shenxf"</span>);</span><br></pre></td></tr></table></figure><ul><li>这样写可以快速的发现问题，看一下下面的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> me = Person(<span class="string">"shenxf"</span>); <span class="comment">// 这里缺少了new</span></span><br><span class="line"><span class="keyword">var</span> you = getPerson(<span class="string">"xx"</span>);</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="直接量"><a href="#直接量" class="headerlink" title="直接量"></a>直接量</h3><ul><li>JavaScript里面的原始值包括：字符串、数字、布尔值、null和undefined。也包含对象和数组的直接量。</li><li>其中只有布尔值是自解释的，其他的多少要考虑下如何能准确地表达其中的含义。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>这里原书的作者提出可以用双引号和单引号。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面都是合法的javascript代码</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"shenxf says, \"Hi.\""</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'shenxf says, "Hi."'</span>;</span><br></pre></td></tr></table></figure><ul><li>书的作者经常使用Java，Java是用双引号来表示字符串。所以作者推荐使用双引号，因为可以和Java语言保持一致。</li><li><p>我个人推荐使用单引号，本人之前使用的很多编码规范插件都是以单引号来声明变量的。我已经习惯了，所以我推荐使用单引号。不管使用哪一种，自己的代码风格保持一致我觉得就可以了。</p></li><li><p>当字符串换行的时候，应该使用运算符来连接。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">var</span> longString = <span class="string">"Here's the story, of a man \</span></span><br><span class="line"><span class="string">named Brady."</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> longString = <span class="string">"Here's the story, of a man"</span> +</span><br><span class="line">                 <span class="string">"named Brady."</span>;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><ul><li>直接给列子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数</span></span><br><span class="line"><span class="keyword">var</span> price = <span class="number">10.0</span>;</span><br><span class="line"><span class="keyword">var</span> price = <span class="number">10.00</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐小数的写法：没有小数部分</span></span><br><span class="line"><span class="keyword">var</span> pricee = <span class="number">10.</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐小数的写法：没有整数部分</span></span><br><span class="line"><span class="keyword">var</span> price = <span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐的写法：八进制写法已经被弃用</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制写法</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 科学计数法</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1e23</span>;</span><br></pre></td></tr></table></figure><ul><li>不推荐写法的前两个感觉特别变扭，不知道是刻意写的还是漏掉的。为了避免歧义，所以不推荐。</li><li>八进制的写法也很容易产生歧义，很有可能被认为是整数<code>10</code>，其实是<code>8</code>,所以不推荐。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><ul><li><p>null比较特殊经常和undefined混淆。</p></li><li><p>应该使用null的场景</p><ul><li>用来初始化一个变量，这个变量可能被赋值为一个对象</li><li>用来和一个已经初始化的变量比较，这个变量可以是也可以不是一个对象</li><li>当函数的参数期望是对象时，用作参数传入</li><li>当函数的返回值期望是对象时，用作返回值传出</li></ul></li><li><p>不应该使用null的场景</p><ul><li>不要使用null来检测是否传入了某个参数</li><li>不要用null来检测一个未初始化的变量</li></ul></li><li><p>例子</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 好的用法</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"shenxf"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的用法</span></span><br><span class="line"><span class="keyword">var</span> person = getPerson();</span><br><span class="line"><span class="keyword">if</span> (person !== <span class="literal">null</span>) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：用来和未初始化的变量进行比较</span></span><br><span class="line"><span class="keyword">var</span> person;</span><br><span class="line"><span class="keyword">if</span> (person != <span class="literal">null</span>) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：检测是否传入了参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2, arg3, arg4</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg4 != <span class="literal">null</span>) &#123;</span><br><span class="line">        doSomethingElse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>理解<code>null</code>最好的方法是把它理解成一个占位符</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><ul><li>最让人困惑的是 <code>null == undefined</code> 的结果是<code>true</code>,然而，这2个值的用法各不相同。</li><li>那些没有被初始化的变量都有一个初始值，即<code>undefined</code>,表示这个变量等待被赋值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">var</span> person;</span><br><span class="line"><span class="built_in">console</span>.log(person === <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>虽然这是正常的代码，但是我们应该经量避免<code>undefined</code>.</li><li>因为<code>undefined</code>有很多让人费解的地方，比如<code>typeof</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo未被声明</span></span><br><span class="line"><span class="keyword">var</span> person;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> person); <span class="comment">// "undefined"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo);    <span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure><ul><li>这段代码看似没什么，但是在某些场景下面有天壤之别（在语句中foo会报错，而person则不会）</li><li>通过禁止使用特殊值<code>undefined</code>,可以使得<code>typeof</code>出来的结果只有一种可能出现<code>undefined</code>。那就是<br>变量未声明的时候。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person === <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>typeof null</code>值返回的是<code>Object</code>,这样可以避开<code>undefined</code>,这样就区分开了。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="对象直接量"><a href="#对象直接量" class="headerlink" title="对象直接量"></a>对象直接量</h4><ul><li>有直接量的东西，最好不要先创建然后再赋值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">var</span> book = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">book.title = <span class="string">"shenxfsbook"</span>;</span><br><span class="line">book.author = <span class="string">"shenxf"</span>;</span><br></pre></td></tr></table></figure><ul><li>直接量可以高效的完成非直接量相同的任务。</li><li>当定义直接量的时候，第一行包含左花括号，每一个属性的名值对都独占一行，并保持一个缩进，最后花括号也独占一行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    title: <span class="string">"shenxfsbook"</span>,</span><br><span class="line">    author: <span class="string">"shenxf"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h4 id="数组直接量"><a href="#数组直接量" class="headerlink" title="数组直接量"></a>数组直接量</h4><ul><li>和对象的直接量类似，不建议使用非直接量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>);</span><br><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一句单行注释</span></span><br></pre></td></tr></table></figure><ul><li>双斜杠后面最好预留一个空格</li><li><p>单行注释 有3中使用方法</p><ul><li>独占一行注释，用来解释下一行代码，这行注释之前总是有一个空行，且缩进层级和下一行代码保持一致</li><li>在代码行的尾部的注释。代码结束到注释之间至少有一个缩进。注释（包括之前的代码部分）不应当超过单行的最大字符数限制，如果超过了，就应该将这行注释放在代码行上方。</li><li>被注释掉的大段代码（编译器自带的批量注释多行代码）</li></ul></li><li><p>单行注释不应该用于多行，除非是注释的大段代码。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果代码执行到这里，则表示通过了左右的安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：注释之前没有空行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果代码执行到这里，则表示通过了左右的安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：错误的缩进</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"><span class="comment">// 如果代码执行到这里，则表示通过了左右的安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">// somethingElse不应当取值为null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：代码和注释之间没有间隔</span></span><br><span class="line"><span class="keyword">var</span> result = something + somethingElse;<span class="comment">// somethingElse不应当取值为null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">// if (condition) &#123;</span></span><br><span class="line"><span class="comment">//     dosomething();</span></span><br><span class="line"><span class="comment">//     thenDoSomethingElse();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法:这里应当用多行注释</span></span><br><span class="line"><span class="comment">// 接下来的这段代码非常难，那么，让我详细的解释下</span></span><br><span class="line"><span class="comment">// 这段代码首先判断条件是否为真</span></span><br><span class="line"><span class="comment">// 。。。。。。。</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果代码执行到这里，则表示通过了左右的安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><ul><li>合法的多行注释</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 我的注释 */</span></span><br><span class="line"><span class="comment">/* 另一段注释</span></span><br><span class="line"><span class="comment">这个注释包含2行 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">又是一段注释</span></span><br><span class="line"><span class="comment">这段注释同样包含2行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>这些注释都是合法但是看得不清晰，推荐使用类似于java的注释方法</li><li>第一是<code>/*</code>,最后一行是<code>*/</code>，当中每一行都以<code>*</code>开头，且空开一个空格</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 另一段注释</span></span><br><span class="line"><span class="comment"> * 这个注释包含2行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>多行注释应该和单行注释一样注释之前要有空行，注释用来说明下面行的代码，并与下一行保持同样的缩进</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果代码执行到这里</span></span><br><span class="line"><span class="comment">     * 说明通过了所有安全性检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：注释之前无空行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果代码执行到这里</span></span><br><span class="line"><span class="comment">     * 说明通过了所有安全性检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：星号之后没有空格</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *如果代码执行到这里</span></span><br><span class="line"><span class="comment">     *说明通过了所有安全性检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：错误的缩进</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果代码执行到这里</span></span><br><span class="line"><span class="comment"> * 说明通过了所有安全性检查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：代码尾部不要用多行注释</span></span><br><span class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">/*somethingElse不应当取值为null*/</span></span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="使用注释"><a href="#使用注释" class="headerlink" title="使用注释"></a>使用注释</h3><ul><li>代码不够清晰时应该添加注释，代码很明了的时候不应该添加注释，有点画蛇添足。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法：注释并没有提供有价值的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化count</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变这个值可能会使它变成青蛙</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>因此，添加注释的原则是需要让代码变的更清晰的时候。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="难以理解的代码"><a href="#难以理解的代码" class="headerlink" title="难以理解的代码"></a>难以理解的代码</h4><ul><li>难以理解的代码应该添加注释</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mode) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当 mode 为2时</span></span><br><span class="line"><span class="comment">     * 用来执行原型合并的操作。。。。</span></span><br><span class="line"><span class="comment">     * 。。。。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (mode === <span class="number">2</span>) &#123;</span><br><span class="line">        Y.mix(receiver.prototype, supplier.prototype, overwrite,</span><br><span class="line">                whitelis, <span class="number">0</span>, merge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 根据模式的类型。。。</span></span><br><span class="line"><span class="comment">      * 。。。。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">from</span> = mode === <span class="number">1</span> || mode === <span class="number">3</span> ? supplier.prototype : supperlier;</span><br><span class="line">    to   = mode === <span class="number">1</span> || mode === <span class="number">4</span> ? receiver.prototype : receiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * .......</span></span><br><span class="line"><span class="comment">     * ......</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">from</span> || !to) &#123;</span><br><span class="line">        <span class="keyword">from</span> = supperlier;</span><br><span class="line">        to   = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">from</span> = supplier;</span><br><span class="line">    to = receiver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h4 id="可能被误认为错误的代码"><a href="#可能被误认为错误的代码" class="headerlink" title="可能被误认为错误的代码"></a>可能被误认为错误的代码</h4><ul><li>团队里面会有一些好心人，自主的把一个看上去错误代码改正，但是这段错误的往往并不是错误的源头</li><li>修改了这段代码会导致另外的bug</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (element &amp;&amp; (element = element[asix])) &#123; <span class="comment">// 赋值操作</span></span><br><span class="line">    <span class="keyword">if</span>( (all || element[TAG_NAME]) &amp;&amp;</span><br><span class="line">        (!fn || fn(element)) ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在这里例子里面作者写明了他是赋值操作，虽然这不是一种标准用法，检测工具可能会检测出问题</li><li>很容易被误解成一个错误。这种注释就表明作者是有意为之。从而避免了不必要的误解。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="游览器特性hack"><a href="#游览器特性hack" class="headerlink" title="游览器特性hack"></a>游览器特性hack</h4><ul><li>为了要兼容低版本的游览器，JavaScript程序员往往会写一些“可能被误认为错误的代码“。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !needle || !element || !needle[NODE_TYPE] || !element[NODE_TYPE]) &#123;</span><br><span class="line">    ret = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (element[CONTAINS]) &#123;</span><br><span class="line">    <span class="comment">// 如果needle不是ELEMENT_NODE时，IE和Safari下会有错误</span></span><br><span class="line">    <span class="keyword">if</span> (Y.UA.opera || needle[NODE_TYPE] === <span class="number">1</span>) &#123;</span><br><span class="line">        ret = element[CONTAINS](needle);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = Y_DOM._bruteContains(element, needle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (element[COMPARE_DOCUMENT_POSITION]) &#123; <span class="comment">// gecko</span></span><br><span class="line">    <span class="keyword">if</span> (element === needle || !!(element[COMPARE_DOCUMENT_POSITION](needle) &amp; <span class="number">16</span>)) &#123;</span><br><span class="line">        ret = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第六行有一段重要的注释，尽管IE和Safari中都有内置的方法contains(),但是needle不是一个元素是，这个方法会报错</li><li>所以只有当浏览器是Opera的时候才能用这个方法。这里说明了为什么要一个if语句。这样不会被别人误改动，而且以后浏览器要做相应的兼容性改动是也能快速的定位到这段代码，对自己的维护也是有好处的。</li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><ul><li>虽然不是JavaScript的组成部分但是现在广泛的被运用，一般文档注释有多种格式，最流行的是源于JavaDoc文档格式：<ul><li>多行注释以单斜线双星号<code>/**</code>开始，接下来是描述信息，其中<code>@</code>符号来表示一个或多个属性。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">返回一个对象，这个对象包含被提供对象的所有属性。</span></span><br><span class="line"><span class="comment">后一个对象的属性会覆盖前一个对象的属性。</span></span><br><span class="line"><span class="comment">传入一个单独对象。。。。</span></span><br><span class="line"><span class="comment">@method merge</span></span><br><span class="line"><span class="comment">@param &#123;Object&#125; 被合并的一个或多个对象</span></span><br><span class="line"><span class="comment">@param &#123;Object&#125; 一个新的合并后的对象</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Y.merge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args    = <span class="built_in">arguments</span>,</span><br><span class="line">        i       = <span class="number">0</span>,</span><br><span class="line">        len     = args.length,</span><br><span class="line">        result  = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (; i&lt;len; ++i) &#123;</span><br><span class="line">        Y.mix(result, args[i], <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>你应当确保对如下的内容添加注释<ul><li>所有的方法<ul><li>应当对方法，期望的参数和可能的返回值添加注释描述。</li></ul></li><li>所有的构造函数<ul><li>应当对自定义类型和期望的参数添加注释描述。</li></ul></li><li>所有包含文档化方法的对象<ul><li>如果一个对象包含一个或多个附带文档注释的方法，那么这个对象也应当适当地针对文档生成工具添加文档注释。</li><li>当然，注释的详细格式和用法最终还是由你所选择的文档生成工具决定的。</li></ul></li></ul></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="花括号的对齐方式"><a href="#花括号的对齐方式" class="headerlink" title="花括号的对齐方式"></a>花括号的对齐方式</h3><ul><li><p>有2中风格</p><ul><li><p>第一个风格是，将左括号放置在第一句代码的末尾</p><ul><li>这种风格来自java<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    doSomethingElse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第二种风格是将左括号放置于块语句首行的下一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    doSomethingElse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这种风格是C#的风格，这种写法会导致，自动插入分号位置错误，所以JavaScript里不推荐用这种风格。</p></li></ul></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="块语句的间隔"><a href="#块语句的间隔" class="headerlink" title="块语句的间隔"></a>块语句的间隔</h3><ul><li><p>有三种主要的风格</p><ul><li><p>第一种风格，在语句名，圆括号和左花括号之间没有空格间隔。</p><ul><li>这种风格可读性不好。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第二种风格,在左圆括号之前和右圆括号之后各添加一个空格</p><ul><li>这种风格最流行。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第三种风格，在左圆括号后和右圆括号前各添加一个空格</p><ul><li>这种写法可读性最高。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( condition ) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>本人和书的作者一样比较推荐第二种风格。</p></li></ul></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><ul><li>JavaScript中的<code>switch</code>语句的行为和在其他语言中是不一样的：switch语句中可以使用任意类型值，任何表达式都可合法地用于case从句。但在其他语言中则必须使用原始值和常量。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><ul><li><p>很多人用java的风格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(condition) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"second"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"third"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>独特之处</p><ul><li>每条<code>case</code>语句相对于<code>switch</code>关键字都缩进一个层级。</li><li>从第二条豫剧开始，每条<code>case</code>语句前后各有一个空行。</li></ul></li><li><p>另一种风格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(condition) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"second"</span>:</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"third"</span>:</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同之处是<code>case</code>关键字与<code>switch</code>保持左对齐，</p></li><li><p>我和作者都喜欢java的风格。</p></li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="case语句的“连续执行”"><a href="#case语句的“连续执行”" class="headerlink" title="case语句的“连续执行”"></a>case语句的“连续执行”</h4><ul><li><code>case</code>后面不加<code>break</code>，就会连续执行下面的条件，这个成为很多系统bug的原罪。</li><li><p>但是还是有许多人接受这种连续执行的编程方法。但是逻辑一定要写的清晰。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(condition) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 明显的依次执行</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"second"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"third"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* fall through */</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前面2行代码是个很明显的连续执行，这是合理的。</p></li><li><code>third</code>里面由于添加了注释，说明这是有意为之。这也是合理的。</li></ul><p><a href="#编程风格">返回顶部</a></p><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><ul><li><p>比较有争论的议题是，是否需要<code>default</code>，很多人不论何时都不省略<code>default</code>，尽管它什么也不做。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(condition) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"second"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// default中没有逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作者比较倾向于，没有默认行为，并且写了注释的情况下可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(condition) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"second"</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有 default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样即表明了没有默认行为，又省下了字节。</p></li><li><p>我比较喜欢第一种，你可以只写<code>default:</code>不写注释。这样也清楚的知道没有默认行为，以后要加默认行为的时候可以少写一行代码。其实2种方法都可以，就看你喜欢哪一种。</p></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><ul><li>在没看这本书之前，我根本不知道这个东西，如果你和我一样，请跳过这一章（不知道也就不会用），这不是什么好东西。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    title: <span class="string">"shenxf javascrpt"</span>,</span><br><span class="line">    author: <span class="string">"shenxf"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">" The book is "</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (book) &#123;</span><br><span class="line">    message += title;</span><br><span class="line">    message += <span class="string">" by "</span> + author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>虽然写法上它可以让我们省略一些字节，但是这东西有坏处，我们很难分辨<code>title</code>和<code>author</code>出现在哪个位置，也难分辨出<code>message</code>到底是局部变量还是<code>book</code>的一个属性。从程序上来讲，JavaScript引擎和压缩工具无法对这段代码进行优化，应为它们无法猜出代码的真正含义。</li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li><p>for循环有两种，一种是传统的for循环，另外一种是for-in循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">    i, len;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>, len=values.length; i &lt; len; i++) &#123;</span><br><span class="line">    process(values[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for循环中可以使用<code>break</code>和<code>continue</code>语句，相信大家肯定知道怎么用。</p></li><li><p>有一种风格中说不要用<code>continue</code>，用<code>continue</code>还不如用条件语句，逻辑更清晰。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">    i, len;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>, len=values.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i !== <span class="number">2</span>) &#123;</span><br><span class="line">        process(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>书的作者没有明确表态，我认为这个不至于，想用还是可以用的。这个语句本身是没有问题的。</p></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><ul><li>相信大家都会用。for-in循环不仅仅遍历对象的实例属性，从原型链继承来的属性也会遍历。当遍历自定义对象的属性时往往会因为意外的结果而终止。因此，最好使用<code>hasOwnProperty()</code>方法来为for-in循环过滤出实例属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (prop <span class="keyword">in</span> object) &#123;</span><br><span class="line">    <span class="keyword">if</span> (object.hasOwnProperty(prop)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Property name is "</span> + prop);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Property value is "</span> + object[prop]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般都会加上<code>hasOwnProperty</code>，但是如果你就是想查找原型链，请加上注释。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (prop <span class="keyword">in</span> object) &#123; <span class="comment">// 包含对原型链的遍历</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Property name is "</span> + prop);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Property value is "</span> + object[prop]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for-in循环是用来遍历对象的，请不要用它来遍历数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的用法</span></span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ],</span><br><span class="line">    i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> values) &#123;</span><br><span class="line">    process(item[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul><li>声明会被提升到当前作用域顶部。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">10</span> + value;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上面代码的理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">var</span> value</span><br><span class="line"></span><br><span class="line">    result = <span class="number">10</span> + value;</span><br><span class="line">    value = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个函数得出的结果是NaN值。 </p></li><li><p>作者倾向的风格,把所有定义放在作用域开始部分，用逗号分隔，可以节省写<code>var</code>的字节。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingWithItems</span>(<span class="params">items</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">10</span>,</span><br><span class="line">        result = value + <span class="number">10</span>,</span><br><span class="line">        i,</span><br><span class="line">        len;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>, len=items.length; i &lt; len; i++) &#123;</span><br><span class="line">        doSomething(items[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ul><li><p>函数声明也会被javaScript引擎提前。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line">doSomething();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>javaScript会把代码解释为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething();</span><br></pre></td></tr></table></figure></li><li><p>我们应该先声明函数再使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingWithItems</span>(<span class="params">items</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i,len,</span><br><span class="line">        value = <span class="number">10</span>,</span><br><span class="line">        result = value + <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>, len=items.length; i &lt; len; i++) &#123;</span><br><span class="line">        doSomething(items[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另外，函数不应该出现在语句块之内。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'hi'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'Yo'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为函数的声明会被提前，所以不管这里的条件满足与否，第二个同名的函数会把第一个函数覆盖。所以上面的代码不会按照我们的意图来执行。</p></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="函数调用间隔"><a href="#函数调用间隔" class="headerlink" title="函数调用间隔"></a>函数调用间隔</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">doSomething(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法：看起来像一个语句块</span></span><br><span class="line">doSomething (item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来做对比的块语句</span></span><br><span class="line"><span class="keyword">while</span> (item) &#123;</span><br><span class="line">    <span class="comment">// 代码逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="立即调用的函数"><a href="#立即调用的函数" class="headerlink" title="立即调用的函数"></a>立即调用的函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般的写法</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的写法 : 被误解为函数的赋值，其实是被赋值为一个对象</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">"Hi"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">"Hi"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><ul><li><code>use strict</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法 - 全局严格模式</span></span><br><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span></span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果希望在多个函数中应用严格模式而不必谢很多行的话，可以使用立即执行函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>为什么不要全局使用严格模式？<ul><li>全局使用严格模式的情况下，其他文件中的（非严格模式下的）代码很可能会报错。</li></ul></li></ul><p><a href="#编程风格">返回顶部</a></p><h3 id="相等"><a href="#相等" class="headerlink" title="相等"></a>相等</h3><ul><li>相等的时候会进行类型转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 比较数字5和字符串5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> == <span class="string">"5"</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较数字25和十六进制的字符串25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">25</span> == <span class="string">"0x19"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><p>发生强制转换的时候字符串会被转换为数字，类似使用<code>Number()</code>转换函数。它能正确转换十六进制的数字。所以第二个表达式是相等的。</p></li><li><p>布尔值和数字比较</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字 1 和 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> == <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字 0 和 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字 2 和 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> == <span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><p>如果其中一个是对象另一个不是，则会先调用<code>valueOf()</code>方法得到原始类型再进行比较，如果没有<code>valueOf()</code>，则调用<code>toString()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0x19"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object == <span class="number">25</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>根据ECMAScript标准规范的描述,<code>null</code>和<code>undefined</code>是相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>由于以上强制类型转换的原因，推荐不要使用<code>==</code>和<code>!=</code>，应当使用<code>===</code>和<code>!==</code>,它们不会类型转换只要类型不一样就返回<code>false</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 比较数字5和字符串5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> == <span class="string">"5"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> === <span class="string">"5"</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较数字25和十六进制的字符串25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">25</span> == <span class="string">"0x19"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">25</span> === <span class="string">"0x19"</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字 1 和 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> == <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> === <span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字 0 和 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="literal">false</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字 2 和 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> == <span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> === <span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0x19"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个对象和25</span></span><br><span class="line"><span class="built_in">console</span>.log(object == <span class="number">25</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object === <span class="number">25</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null和undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><a href="#编程风格">返回顶部</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;边看书边做笔记，这个仓库主要是参照《编写可维护的JavaScript》这本书，来总结自己的学习笔记。&lt;br&gt;只是自己的总结，和书本不一样，如果觉得不错，你可以购买这本书自己研究。书本还涉及到JSLint，JSHint&lt;br&gt;中的区别。实例代码从哪里取材，各种组织或公司的代码
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="JavaScript" scheme="http://shenxf.top/tags/JavaScript/"/>
    
      <category term="可维护" scheme="http://shenxf.top/tags/%E5%8F%AF%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>seo学习</title>
    <link href="http://shenxf.top/2019/05/29/20190529-seoStudy/"/>
    <id>http://shenxf.top/2019/05/29/20190529-seoStudy/</id>
    <published>2019-05-29T04:12:26.000Z</published>
    <updated>2019-05-29T04:13:37.785Z</updated>
    
    <content type="html"><![CDATA[<ul><li>主要是运用到自己博客网站的seo, 做这个记录以免以后自己忘记。想到一点写一点。<br>买关键字的朋友，就不要看了。写的不好请见谅，如有问题请联系。</li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>网站seo三大要素<ul><li>标题<ul><li>这个网站权重最高的关键字,要好好考虑。<ul><li>内页文章的关键字尽量不要和自己的标题重叠。如果内页的权重高于自己的主页就不好了。要避开标题。</li></ul></li></ul></li><li>关键字<ul><li>仅次于标题的权重，一般最好不要超过30个。多了被K。也不要太少。</li></ul></li><li>网站描述<ul><li>用来描述网站的基本信息，当某人通过百度查询到你网站的时候，能够在百度查询结果中看到这些描述。<br>描述写的好，能够增加一定的流量。</li></ul></li></ul></li><li>网站的内链和外链<ul><li>外链保持在30左右最好，太多了也不好，而且外链的增长速度不能太快，否则会被百度K掉。通过查询百度快照，<br>  每次快照更新后，增加几条外链是没有问题的。一下子增加30条，会被K。</li><li>内链要合理，一篇1000字文章保持10左右的内链是最好的，这样可以使蜘蛛在自己网站来回转圈。<ul><li>蜘蛛在网站停留的时间越久，收录性越好。</li></ul></li></ul></li><li>更新带动器<ul><li>主页一定要经常变动，一点不变动，蜘蛛就不会来了<ul><li>没时间天天更新，怎么让他变动？ 最新文章，网站访问人数，随机推荐文章等。<br>（找点理由让主页每天都有变动）写点随机函数什么的。</li></ul></li></ul></li><li>百度蜘蛛<ul><li>用来爬取网站的内容，收录到百度里面。</li><li>它对于前端渲染的页面不是很友好（比如：vue，react，angular）</li></ul></li><li>站点地图<ul><li>主动推送给百度和谷歌，让他们能尽早收录你。<ul><li>可以通过 <code>site:www.shenxf.com</code> 来查询自己网站是否被收录</li></ul></li></ul></li></ul><h2 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h2><ul><li><a href="http://index.baidu.com" target="_blank" rel="noopener">百度指数</a><ul><li>主要测试关键字排名等情况</li></ul></li><li><a href="http://www.chinaz.com/web/seo/" target="_blank" rel="noopener">站长之家</a></li></ul><h2 id="提高自己网站SEO"><a href="#提高自己网站SEO" class="headerlink" title="提高自己网站SEO"></a>提高自己网站SEO</h2><ul><li><p>通过相关大型网站。</p><ul><li>大型网站权重较高，这种网站内页权重也非常高，蜘蛛爬过来的频率较高，通过在这些平台。增加自己的外链。<br>能有效的提高自己网站的seo。</li><li>在博客等网站，注册一个博客，每天发一篇100字的日记等。中间吧自己的网站链接关键字带上。<br>一定程序能够增加自己网站的收录</li></ul></li><li><p>分析自己的竞争对手。</p><ul><li>先搞懂什么是一级域名，二级域名，一级目录，二级目录。<ul><li>如果搜索出来的关键字，都是一级域名，一级目录，那这个关键字竞争非常激烈。</li><li>如果搜索出来的关键字，都是 大型网站（百度知道等就算是二级域名，二级目录），这个关键字也非常难竞争。<br>而且几乎很难把关键字做到他们前面。</li></ul></li><li>通过站长工具，查看竞争对手的网站权重。</li><li>查看对手的百度快照，时间越老对手越弱。</li><li>通过百度指数查找关键的流量，并找到相对较弱的对手，强化自己的关键字。</li></ul></li><li><p>通过加入SEO社交群来，交换外链。</p><ul><li>注意：对方的外链超过30个，不要交换了，对方能分配给你的权重较低。</li><li>注意：对方网站有黄色暴力等敏感的网站，不要交换了。</li><li>注意：对方的人品较差，不要交换了。</li><li>注意：对方的网站已经被K了，千万不要交换（这个会影响到你的网站）,通过 <code>site: 他的网站</code> 查询是否被K.</li><li>注意：外链的增长速度不能太快，会被K。合理分析百度快照，保持每次增长2~3条外链。</li><li>注意：对方网站的内容是否与你相关，相关较小的，优先度降低。</li><li>通过站长工具，可以查询自己网站的外链情况。如果有人把你删了，你也把他删了，换一个外链。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;主要是运用到自己博客网站的seo, 做这个记录以免以后自己忘记。想到一点写一点。&lt;br&gt;买关键字的朋友，就不要看了。写的不好请见谅，如有问题请联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="seo" scheme="http://shenxf.top/tags/seo/"/>
    
      <category term="seo优化" scheme="http://shenxf.top/tags/seo%E4%BC%98%E5%8C%96/"/>
    
      <category term="seo学习" scheme="http://shenxf.top/tags/seo%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue发布过程中遇到坑，以及webpack打包优化</title>
    <link href="http://shenxf.top/2019/05/16/20190516-vueSpeedUp/"/>
    <id>http://shenxf.top/2019/05/16/20190516-vueSpeedUp/</id>
    <published>2019-05-16T12:06:24.000Z</published>
    <updated>2019-05-28T04:31:10.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这段时间，本人自己做了一个vue画面部署到自己的服务器上，发现运行速度慢的的惊人，虽然服务器很渣（本人没什么钱，只能租最差的服务器，主要是给自己学习用的），但是这样开发出来的网站简直不能用，所以就查阅各种资料和网站，一步一步把代码包优化。这篇文章主要是把我调优的过程记录下来。</li><li>项目的基础框架是通过TypeScript官网取得的。<a href="https://www.tslang.cn/samples/index.html" target="_blank" rel="noopener">各种基础框架模版</a></li><li>项目的构成 vue + ant-design + mysql + TypeScript</li><li><a href="https://github.com/shen1986/shenBlog/tree/master/front-vueProject/admin" target="_blank" rel="noopener">vue项目地址</a></li><li>最后，关于如何在vue里面实现按需加载，请自行查阅相关资料。以及，webpack的基础知识本文也不做介绍，可以参照我github的 <a href="https://github.com/shen1986/webpackStudy" target="_blank" rel="noopener">学习笔记</a></li></ul><h2 id="调优过程"><a href="#调优过程" class="headerlink" title="调优过程"></a>调优过程</h2><ol><li>禁用webpack的devtools</li></ol><ul><li>打包出来的js文件非常大，每个js文件竟然达到了3～4Mbs，这样的体积对于我的服务带宽来说根本负担不起。打开画面必卡。</li><li>究其原因，是因为webpack里面启用了sourceMap，以便于调试。但是这在发布以后就完全没有用了。</li><li>webpack配置，里面有这句话，把这句话注释掉。原本3～4Mbs的文件，变成了1Mbs文件。压缩了3倍以上。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用sourceMap</span></span><br><span class="line">devtool: <span class="string">'#source-map'</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>抽离css样式等</li></ol><ul><li><p>这个虽然对于改善效果不明显，但是好的分类对于发现问题的本质有很大的帮助。另外，css样式分离后要自己进行压缩。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *************webpack需要引入的包*************************</span></span><br><span class="line"><span class="comment">// 抽离css样式</span></span><br><span class="line"><span class="keyword">let</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="comment">// 用来压缩分离出来的css样式</span></span><br><span class="line"><span class="keyword">let</span> OptimizeCss =  <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">// 用来压缩js</span></span><br><span class="line"><span class="keyword">let</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// *************webpack相关配置部分*************************</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">// 优化项</span></span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCss(), <span class="comment">// 压缩css</span></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123; <span class="comment">// 压缩js</span></span><br><span class="line">                cache: <span class="literal">true</span>, <span class="comment">// 是否用缓存</span></span><br><span class="line">                parallel: <span class="literal">true</span>, <span class="comment">// 并发打包</span></span><br><span class="line">                sourceMap: <span class="literal">false</span>, <span class="comment">// es6 -&gt; es5 转换时会用到</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中间部分省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽离css样式</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'css/[name].css'</span>, <span class="comment">// 抽离出来样式的名字</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽离之后，现在项目生成文件的大小是这样。<br><img src="/2019/05/16/20190516-vueSpeedUp/G1.jpg" alt="JS文件的大小"></p></li></ul><ol start="3"><li>启用依赖关系可视化工具</li></ol><ul><li><p>完成上面工作之后，陷入了茫然，网站还是很卡，不知道还能怎么调优，在翻阅了很多网站资料以后，发现了一个依赖关系可视化工具，这对于我来说是一个重大的突破口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖关系可视化</span></span><br><span class="line"><span class="comment">// *************webpack需要引入的包*************************</span></span><br><span class="line"><span class="keyword">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// *************webpack相关配置部分*************************</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动依赖关系可视化窗口，绑定端口8919</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> BundleAnalyzerPlugin(&#123; <span class="attr">analyzerPort</span>: <span class="number">8919</span> &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新进行编译以后的效果图<br><img src="/2019/05/16/20190516-vueSpeedUp/G2.jpg" alt="JS文件的依赖关系图"></p></li><li><p>通过这个效果图可以很明显的看出js文件里面包含什么依赖，我就是通过这个线索来进行优化的。</p></li></ul><ol start="4"><li>抽离共通部分</li></ol><ul><li><p>为了方便我调查，我把共通的依赖部分都抽离出来了。而这个功能是webpack4自带的，如果是之前或者更早版本的webpack，需要引入第三方组件<code>CommonsChunkPlugin</code>这里不做介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">//打包 公共文件</span></span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    <span class="comment">//node_modules内的依赖库</span></span><br><span class="line">                    chunks: <span class="string">'all'</span>,</span><br><span class="line">                    test: <span class="regexp">/[\\/](node_modules)[\\/]/</span>, <span class="comment">// 文件路径里面带有node_modules 都抽离出来做共通</span></span><br><span class="line">                    name: <span class="string">'vendor'</span>,</span><br><span class="line">                    minChunks: <span class="number">1</span>, <span class="comment">//被不同entry引用次数(import),1次的话没必要提取</span></span><br><span class="line">                    maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">                    minSize: <span class="number">0</span>,</span><br><span class="line">                    priority: <span class="number">100</span>,</span><br><span class="line">                    <span class="comment">// enforce: true?</span></span><br><span class="line">                &#125;,</span><br><span class="line">                common: &#123;</span><br><span class="line">                    <span class="comment">// ‘src/js’ 下的js文件</span></span><br><span class="line">                    chunks: <span class="string">'all'</span>,</span><br><span class="line">                    test: <span class="regexp">/[\\/]src[\\/]js[\\/]/</span>, <span class="comment">//也可以值文件/[\\/]src[\\/]js[\\/].*\.js/,</span></span><br><span class="line">                    name: <span class="string">'common'</span>, <span class="comment">//生成文件名，依据output规则</span></span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">                    minSize: <span class="number">0</span>,</span><br><span class="line">                    priority: <span class="number">1</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        runtimeChunk: &#123;</span><br><span class="line">            name: <span class="string">'manifest'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一开始我对于这个属性的名字难以理解，以至于没有效果,看了下面的文章后全明白了。</p><ul><li><a href="https://www.jianshu.com/p/3066d96aec8b" target="_blank" rel="noopener">公共代码抽取说明</a></li></ul></li><li><p>效果图如下<br><img src="/2019/05/16/20190516-vueSpeedUp/G3.jpg" alt="JS文件的依赖关系图2"></p></li><li><p>JS文件大小<br><img src="/2019/05/16/20190516-vueSpeedUp/G4.jpg" alt="JS文件大小2"></p></li></ul><ol start="5"><li>分析包大小问题</li></ol><ul><li>从上面的依赖效果图可以明显的看出，有几个包特别大，特别显眼<ul><li>ant-design的Icons文件</li><li>moment文件</li><li>quill文件</li><li>highlight.js文件</li></ul></li></ul><ol start="6"><li>ant-design的Icons文件优化</li></ol><ul><li>这是ant-design的一个<a href="https://github.com/ant-design/ant-design/issues/12011" target="_blank" rel="noopener">问题</a></li><li>而关于上面的问题，我建议你们直接看链接最下面的部分。（上面的一群人聊了半天，不知所以然，各种链接来回跳，也没找到结果）</li><li>核心的几句话。<br><img src="/2019/05/16/20190516-vueSpeedUp/G5.png" alt="JS解决方案"><br><img src="/2019/05/16/20190516-vueSpeedUp/G6.png" alt="TS解决方案"></li><li>通过了自己的理解，一个要自己引入相应的Icon，另一个是要在webpack里面进行配置</li><li><p>增加antdIcon.ts代码，引入相应的Icon</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己项目里面用到的Icon</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> FileOutline,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/FileOutline'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// antd的message组建内部用到的Icon 把源代码复制过来。</span></span><br><span class="line"><span class="comment">// var iconType = &#123;</span></span><br><span class="line"><span class="comment">//     info: 'info-circle',</span></span><br><span class="line"><span class="comment">//     success: 'check-circle',</span></span><br><span class="line"><span class="comment">//     error: 'close-circle',</span></span><br><span class="line"><span class="comment">//     warning: 'exclamation-circle',</span></span><br><span class="line"><span class="comment">//     loading: 'loading'</span></span><br><span class="line"><span class="comment">// &#125;[args.type]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2019/5/20改正，有些Icon没引全，导致message里面有些图标出不来，这个把相关的全引了。</span></span><br><span class="line"><span class="comment">// message info</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> InfoCircleOutline,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/InfoCircleOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> InfoCircleFill,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/fill/InfoCircleFill'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> InfoCircleTwoTone,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/twotone/InfoCircleTwoTone'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// message success</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> CheckCircleOutline,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/CheckCircleOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> CheckCircleFill,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/fill/CheckCircleFill'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> CheckCircleTwoTone,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/twotone/CheckCircleTwoTone'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// message error</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> CloseCircleOutline,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/CloseCircleOutline'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> CloseCircleFill,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/fill/CloseCircleFill'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> CloseCircleTwoTone,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/twotone/CloseCircleTwoTone'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// message warning</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> ExclamationCircleOutline,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/ExclamationCircleOutline'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> ExclamationCircleFill,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/fill/ExclamationCircleFill'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// message loading</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">as</span> LoadingOutline,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/LoadingOutline'</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改 webpack 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        modules: [path.resolve(__dirname, <span class="string">'./src'</span>), <span class="string">'node_modules'</span>], <span class="comment">// &lt;- 追加代码</span></span><br><span class="line">        extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>], <span class="comment">// &lt;- 追加代码</span></span><br><span class="line">        alias: &#123;</span><br><span class="line">            vue$: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">            <span class="string">'@ant-design/icons/lib/dist$'</span>: path.resolve(__dirname, <span class="string">'./src/tools/antdIcon.ts'</span>), <span class="comment">// &lt;- 追加代码</span></span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [ <span class="comment">// &lt;- 追加代码</span></span><br><span class="line">            <span class="keyword">new</span> TsconfigPathsPlugin(&#123;</span><br><span class="line">                configFile: path.resolve(__dirname, <span class="string">'./tsconfig.json'</span>),</span><br><span class="line">            &#125;),</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li><p>再一次编译,是不是发现已经看不到Icon了，本来就应该这样，我的项目中根本没用几个Icon<br><img src="/2019/05/16/20190516-vueSpeedUp/G7.png" alt="依赖效果图3"></p></li><li><p>JS文件的大小,直接减少了500K左右<br><img src="/2019/05/16/20190516-vueSpeedUp/G8.png" alt="JS文件大小3"></p></li></ul><ol start="7"><li>moment文件优化</li></ol><ul><li>这是个Ant-design内部依赖的语言文件，我的程序里面本身没有引用，我主要用到的是里面的中文，所以，中文以外的我全部在webpack里面设置忽略就行了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 只读取（zh-cn）文件。</span></span><br><span class="line">        <span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[\\\/]locale$/</span>, /^\.\/(zh-cn)$/),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li>quill文件优化</li></ol><ul><li><p>这个是我用到的富文本功能，本身对这个组件不太了解，但又必须要用到，也没什么太好优化方法，索性，把它抽离成一个单独的共通JS文件，这样起码有2个组建同时调用这个富文本的情况下，只有第一个掉用的那个需要引入JS文件，第二次的那个会直接利用浏览器的缓存来调用这个JS文件的，也有一定程度的优化效果。</p></li><li><p>所以我修改了抽离共通组件的那部分代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    chunks: <span class="string">'all'</span>,</span><br><span class="line">                    test: <span class="regexp">/[\\/](quill)[\\/]/</span>, <span class="comment">// &lt;- 就是简单修改了下匹配规则</span></span><br><span class="line">                    name: <span class="string">'vendor'</span>,</span><br><span class="line">                    minChunks: <span class="number">1</span>,</span><br><span class="line">                    maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">                    minSize: <span class="number">0</span>,</span><br><span class="line">                    priority: <span class="number">100</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                common: &#123;</span><br><span class="line">                    chunks: <span class="string">'all'</span>,</span><br><span class="line">                    test: <span class="regexp">/[\\/]src[\\/]js[\\/]/</span>,</span><br><span class="line">                    name: <span class="string">'common'</span>,</span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">                    minSize: <span class="number">0</span>,</span><br><span class="line">                    priority: <span class="number">1</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        runtimeChunk: &#123;</span><br><span class="line">            name: <span class="string">'manifest'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>7和8修改之后的效果<br><img src="/2019/05/16/20190516-vueSpeedUp/G9.png" alt="依赖关系效果图4"></p></li><li><p>7和8修改之后的JS文件大小<br><img src="/2019/05/16/20190516-vueSpeedUp/G10.png" alt="JS文件大小4"></p></li></ul><ol start="9"><li>highlight.js文件优化</li></ol><ul><li>这个主要是我用markdown编辑器的时候，用来给文字着色的。没有这个，在编写markdown的时候，内容非常的丑陋。</li><li>但是这个东西的语法太多了，导致这个包非常的大，我编写的时候，只需要利用其中的几种情况而已，我先随便定几种情况，反正是自己的项目，有不够的以后随时再追加（正式项目的话请做好调研）</li><li><p><a href="https://www.npmjs.com/package/highlight.js" target="_blank" rel="noopener">highlight.js官方说明</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需加载的写法</span></span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">'highlight.js/lib/highlight'</span>;</span><br><span class="line"><span class="keyword">import</span> javascript <span class="keyword">from</span> <span class="string">'highlight.js/lib/languages/javascript'</span>;</span><br><span class="line">hljs.registerLanguage(<span class="string">'javascript'</span>, javascript);</span><br></pre></td></tr></table></figure></li><li><p>改完文件以后再看依赖关系<br><img src="/2019/05/16/20190516-vueSpeedUp/G11.png" alt="依赖关系效果图5"></p></li><li><p>JS文件大小<br><img src="/2019/05/16/20190516-vueSpeedUp/G12.png" alt="JS文件大小5"></p></li><li><p>至此，我觉得以我现在的水平代码已经没有什么好调整了，main文件还是有点大，我也已经尽力了。</p></li></ul><ol start="10"><li>服务开启Gzip代码压缩</li></ol><ul><li>我用的是nginx服务器，它可以开启Gzip，代码压缩率非常可观。200k文件直接被它压缩到几十k。</li><li><p>原本还有点小卡的网站，在启用了Gzip之后，变得一点也不卡了。</p></li><li><p>修改nginx配置，这里有个小的坑（最后还给我来一个坑），随便找个网站复制下，大致都长下面这样，最后要重启nginx服务，让它读取最新配置<code>nginx -s reload</code>。如果你用的是<code>docker</code>请输入<code>docker exec -it 容器名字 service nginx reload</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_min_length  5k;</span><br><span class="line">gzip_buffers     4 16k;</span><br><span class="line"><span class="meta">#</span>gzip_http_version 1.0;</span><br><span class="line">gzip_comp_level 3;</span><br><span class="line">gzip_types       text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure></li><li><p>坑在哪里？你自己看吧，说出来都是泪啊<a href="https://blog.csdn.net/hl_java/article/details/81946228" target="_blank" rel="noopener">坑</a></p></li><li><p>Gzip有啥缺点？ 我也不太清楚，第一应该是它不支持IE6以及IE6以下的浏览器。还有人说他不利于SEO，但也有人说他利于SEO，是真是假去问百度。网上大部分人觉的他的优点大于缺点。</p></li><li><p>谢谢大家。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这段时间，本人自己做了一个vue画面部署到自己的服务器上，发现运行速度慢的的惊人，虽然服务器很渣（本人没什么钱，只能租最差的服务
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="vue" scheme="http://shenxf.top/tags/vue/"/>
    
      <category term="webpack" scheme="http://shenxf.top/tags/webpack/"/>
    
      <category term="性能调优" scheme="http://shenxf.top/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>前端网站整理</title>
    <link href="http://shenxf.top/2019/04/23/20190423-siteMemo/"/>
    <id>http://shenxf.top/2019/04/23/20190423-siteMemo/</id>
    <published>2019-04-23T05:56:47.000Z</published>
    <updated>2019-06-03T01:59:02.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资讯-文章-UI库-API说明等"><a href="#资讯-文章-UI库-API说明等" class="headerlink" title="资讯 文章 UI库 API说明等"></a>资讯 文章 UI库 API说明等</h2><ul><li><a href="https://www.awesomes.cn/" target="_blank" rel="noopener">Awesomes</a><ul><li>前端资讯，库，排名</li></ul></li><li><a href="https://ant.design/" target="_blank" rel="noopener">Ant Design</a><ul><li>React,Angular,Vue用UI </li></ul></li><li><a href="https://pro.ant.design/index-cn" target="_blank" rel="noopener">Antd Pro</a><ul><li>Ant Design的进阶版</li></ul></li></ul><ul><li><a href="https://bizcharts.net/products/bizCharts/demo" target="_blank" rel="noopener">React图表模块</a><ul><li>用在React里面做图标还不错</li></ul></li></ul><ul><li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a><ul><li>js基本语法查询</li></ul></li><li><a href="https://icomoon.io/app/#/select" target="_blank" rel="noopener">ICOMOON</a><ul><li>比较有名的字体标签库</li></ul></li><li><a href="https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/" target="_blank" rel="noopener">关于BFC的文章</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a><ul><li>可以查询node的核心api</li></ul></li></ul><ul><li><a href="https://www.tslang.cn/" target="_blank" rel="noopener">typeScript中文网</a><ul><li>越来越多的被使用，以后可能成为前端行业的标准。</li></ul></li></ul><ul><li><a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noopener">fullPage</a><ul><li>画面全屏切换插件，3.0之后的版本需要许可证</li></ul></li><li><a href="http://www.bootcss.com/" target="_blank" rel="noopener">bootstrap</a><ul><li>这个太有名了，不说了</li></ul></li></ul><ul><li><a href="https://github.com/lyonlai/bootstrap-paginator" target="_blank" rel="noopener">bootstrap翻页插件</a><ul><li>基于bootstrap的翻页插件，不想自己写翻页就用他</li></ul></li><li><a href="https://mongoosejs.com" target="_blank" rel="noopener">mongoose官网</a><ul><li>mongoose相关语法查询</li></ul></li><li><a href="https://www.npmjs.com" target="_blank" rel="noopener">npm官网</a><ul><li>查询各种安装包</li></ul></li><li><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">animate.css</a><ul><li>各种动画效果</li></ul></li><li><a href="https://www.npmjs.com/package/vue-quill-editor" target="_blank" rel="noopener">Vue富文本</a></li><li><a href="https://webpack.js.org" target="_blank" rel="noopener">webpack官网</a><ul><li>查询使用方法</li></ul></li></ul><h2 id="Nodejs模板引擎"><a href="#Nodejs模板引擎" class="headerlink" title="Nodejs模板引擎"></a>Nodejs模板引擎</h2><ul><li><a href="http://aui.github.com/artTemplate/*/" target="_blank" rel="noopener">art-Template</a><ul><li>这是中国人做的，有中文文档，门槛低</li></ul></li><li><a href="https://ejs.co" target="_blank" rel="noopener">EJS</a><ul><li>门槛低，使用简单，非侵入式。</li><li>EJS是CanJS默认的模板语言，它提供了与Observes的实时绑定的使用。EJS非常易于使用，在模板中写入想要的HTML，以及一些表示动态行为的魔法标签即可。EJS不支持block功能。</li></ul></li><li><a href="http://jade-lang.com/" target="_blank" rel="noopener">jade</a><ul><li>门槛高，不容易使用，侵入式，利于后期维护，文件小。</li><li>使用这个模板引擎，可以让代码写得更少，开发很轻松。但在Node.js环境使用比较费时，因为必须先把文件转换为HTML，再转换成Jade。</li></ul></li><li><a href="http://olado.github.io/doT/" target="_blank" rel="noopener">doT</a><ul><li>doT并非最易于使用的模板引擎，但它满足以下需求： <ul><li>如果模板引擎在客户端和服务器端都需要使用 </li><li>如果模板需要庞大的逻辑，而且还想让应用程序跑得很快 </li><li>如果需要预编译的模板</li></ul></li></ul></li><li><a href="http://underscorejs.org/" target="_blank" rel="noopener">Underscore.js</a><ul><li>Underscore是一个JavaScript库，提供了一系列有用的函数式编程帮助程序，而不扩展任何内置对象。<br>Underscore提供了超过100个函数，支持map、filter、invoke等特性，以及函数绑定、JavaScript模板、创建快速索引、深度等价测试等。</li></ul></li><li><a href="http://www.dustjs.com/" target="_blank" rel="noopener">Dust.js</a><ul><li>Dust是一个Javascript模板引擎，它继承了ctemplate语言风格，并设计为在服务器和浏览器上异步运行。<br>与其它模板引擎相比，Dust不是无逻辑的，只是有较少的逻辑。 <ul><li>不能在Dust模板中编写任意Javascript。但是，您仍然有基本的逻辑运算符，如比较，小于/大于，存在/不存在。这在模板可读性和数据控制之间达到平衡。 </li><li>Dust鼓励将逻辑移动到数据模型。可以在模型中创建函数，然后通过模板调用，可以完全控制模板如何呈现，而不会使逻辑混乱。 </li><li>异步模板加载，渲染和流式传输。故不必预加载模板。 </li><li>可组合模板，支持部分包含和动态模板块，将模板拼接在一起，实现手动构建布局。 </li><li>HTML安全，格式无关。Dust通过安全地转义数据，防止跨站点脚本攻击。 </li><li>高性能。在性能和功能之间取得平衡。虽然它没有Mustache那么快，但它的异步性意味着可以更快地渲染大模板。 </li><li>Dust工作在JavaScript。</li></ul></li></ul></li><li><a href="http://handlebarsjs.com/" target="_blank" rel="noopener">Handlebars</a><ul><li>Handlebars.js是Chris Wanstrath创建的Mustache模板语言的扩展。Handlebars.js和Mustache都是无逻辑模板语言，保持视图和代码分离。<br>一般来说，Handlebars.js模板的语法是Mustache模板的超集。<br>其基本语法可以参考Mustache的帮助页：&lt; <a href="http://mustache.github.com/mustache.5.html&gt;" target="_blank" rel="noopener">http://mustache.github.com/mustache.5.html&gt;</a><br>Handlebars允许模板被预编译，并包含到JavaScript代码中，使得启动时间更短。<br>Handlebars不兼容Mustache的几点： <ul><li>Handlebars默认不执行递归查找，除非在编译时compat标志必须设置为启用此功能。用户应注意，启用此标志会产生性能成本。 </li><li>不支持可选的Mustache风格的Lambdas表达式。 </li><li>不支持备用分隔符</li></ul></li></ul></li><li><p><a href="http://mustache.github.io/" target="_blank" rel="noopener">Mustache</a></p><ul><li><p>Mustache是一个非常简单易用的模板引擎，号称无逻辑的模板引擎，可以用于HTML、配置文件、源代码等等场景。<br>之所以称之为无逻辑的模板引擎，是因为它没有if语句、else条件、for循环等结构体。只有标签，使用值来替换标签，值可以是哈希或对象，就这么简单。<br>Mustache模板有两种定义，Mustache (1)和Mustache (5)<br>Mustache支持主流的编程语言，比如Ruby, JavaScript, Python, Erlang, node.js, PHP, Perl, Perl6, Objective-C, Java,Android, C++, Go, Lua等。<br>Mustache也可以很好地与编辑器TextMate, Vim, Emacs, Coda, Atom等相结合。</p></li><li><p>Mustache (1)手册：&lt; <a href="http://mustache.github.io/mustache.5.html&gt;" target="_blank" rel="noopener">http://mustache.github.io/mustache.5.html&gt;</a> </p></li><li><p>Mustache (5) 手册：&lt; <a href="http://mustache.github.io/mustache.1.html&gt;" target="_blank" rel="noopener">http://mustache.github.io/mustache.1.html&gt;</a></p></li><li><p>Mustache (1)的灵感来自于ctemplate，并于2009年底发布第一版。第一个版本的模板引擎使用Ruby语言实现，运行YAML模板文本。采用的主要原则有：一是强调“无逻辑”，没有显式的控制流程语句，所有控制都由数据驱动；二是强调“逻辑与表示的分离”，不可能将应用程序逻辑嵌入到模板中。</p></li></ul></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="http://tool.oschina.net/" target="_blank" rel="noopener">开源中国在线工具</a> <ul><li>HTTP Mime-type可以查询所有文件对应的content-type</li><li>js,css等代码压缩</li></ul></li><li><a href="https://www.html.cn/tool/html2js/" target="_blank" rel="noopener">html转换成js</a></li><li><a href="http://www.bitbug.net/" target="_blank" rel="noopener">ico转换网站</a></li></ul><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><ul><li><a href="https://standardjs.com/" target="_blank" rel="noopener">JavaScript Standard Style</a></li><li><a href="http://airbnb.io/javascript/" target="_blank" rel="noopener">Airbnb JavaScript Style</a><ul><li>这个风格比上面的风格更严谨，规矩更多。本人比较喜欢自由点的风格。</li><li>如果是公司或者大型的项目推荐使用这种风格。</li></ul></li></ul><h2 id="2次元人偶插件"><a href="#2次元人偶插件" class="headerlink" title="2次元人偶插件"></a>2次元人偶插件</h2><ul><li><a href="https://www.cokemine.com/live2d1.html" target="_blank" rel="noopener">live2d</a><ul><li>挺有趣的，有兴趣的可以试下</li></ul></li></ul><h2 id="博客网站相关"><a href="#博客网站相关" class="headerlink" title="博客网站相关"></a>博客网站相关</h2><ul><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a><ul><li>统计网站访问数，连接数等。</li></ul></li><li><a href="https://leancloud.cn/" target="_blank" rel="noopener">leanCloud</a><ul><li>文章阅读量统计</li><li><a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">文章评论系统</a><ul><li>经过测试比较好用，而且不像畅言那样需要备案。强烈推荐。</li><li><a href="https://en.gravatar.com/emails/" target="_blank" rel="noopener">配置头像的地址</a></li></ul></li><li><a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a><ul><li>文章评论系统的扩展，能够有邮件提醒功能，有兴趣的话可以研究下，还挺管用的。</li></ul></li></ul></li><li><a href="https://tongji.baidu.com/web/27558325/welcome/login" target="_blank" rel="noopener">百度统计</a><ul><li>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。</li></ul></li><li><a href="https://blog.csdn.net/q2158798/article/details/79801226" target="_blank" rel="noopener">域名的URL转发功能</a><ul><li>解决码云不开发cname接口的问题</li></ul></li><li><a href="https://www.inoreader.com" target="_blank" rel="noopener">Rss阅读器</a></li></ul><h2 id="github优化"><a href="#github优化" class="headerlink" title="github优化"></a>github优化</h2><ul><li><a href="https://baijiahao.baidu.com/s?id=1608100091125662190&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">GitHub访问速度慢的一种优化方法</a><ul><li>经过测试这种方法对于Git也有一定程度的优化。</li></ul></li><li><a href="https://blog.csdn.net/weixin_42237775/article/details/81365324" target="_blank" rel="noopener">GitHub优化-Mac</a></li></ul><h2 id="免费数据库"><a href="#免费数据库" class="headerlink" title="免费数据库"></a>免费数据库</h2><ul><li><a href="https://mlab.com/" target="_blank" rel="noopener">免费mongoDB数据500M</a><ul><li>服务器地址 <a href="https://cloud.mongodb.com" target="_blank" rel="noopener">https://cloud.mongodb.com</a></li></ul></li></ul><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><ul><li><a href="https://www.html.cn/doc/jsdoc/" target="_blank" rel="noopener">JSdoc中文网</a></li><li><a href="https://www.cnblogs.com/mq0036/p/6540194.html" target="_blank" rel="noopener">C#文档注释</a></li></ul><h2 id="geojson"><a href="#geojson" class="headerlink" title="geojson"></a>geojson</h2><ul><li>可以通过高德地图api 和 百度地图api 去的geo。如果只是画地图就从下面的连接去下边界数据就行了。</li><li><a href="http://datav.aliyun.com/tools/atlas/#&amp;lat=33.521903996156105&amp;lng=104.29849999999999&amp;zoom=4" target="_blank" rel="noopener">阿里云地图数据</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;资讯-文章-UI库-API说明等&quot;&gt;&lt;a href=&quot;#资讯-文章-UI库-API说明等&quot; class=&quot;headerlink&quot; title=&quot;资讯 文章 UI库 API说明等&quot;&gt;&lt;/a&gt;资讯 文章 UI库 API说明等&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="网站开发" scheme="http://shenxf.top/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端网站" scheme="http://shenxf.top/tags/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%AB%99/"/>
    
      <category term="网址" scheme="http://shenxf.top/tags/%E7%BD%91%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>使用vscode时，如何在.vue文件中使用html代码补全功能</title>
    <link href="http://shenxf.top/2019/04/22/20190422-vscode/"/>
    <id>http://shenxf.top/2019/04/22/20190422-vscode/</id>
    <published>2019-04-22T02:47:43.000Z</published>
    <updated>2019-04-22T02:51:26.434Z</updated>
    
    <content type="html"><![CDATA[<p>使用vscode编写vue代码，刚开始点击tab是不会自动补全代码的，这个就很郁闷了。<br>百度了半天：<a href="https://segmentfault.com/a/1190000010339485" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010339485</a> 参考这个最后解决了问题</p><h2 id="一、HTML-Snippets"><a href="#一、HTML-Snippets" class="headerlink" title="一、HTML Snippets"></a>一、HTML Snippets</h2><ul><li>在vscode中把这个插件下载了并且启用，然后翻阅插件的ReadMe，我们可以看到如下图得FAQ:</li></ul><p><img src="/2019/04/22/20190422-vscode/20180319180501532.png" alt="FAQ"></p><ul><li>这段代码是提示我们需要在settings.json中配置files.associations的属性。</li></ul><h2 id="二、settings-json中配置files-associations对象"><a href="#二、settings-json中配置files-associations对象" class="headerlink" title="二、settings.json中配置files.associations对象"></a>二、settings.json中配置files.associations对象</h2><ul><li><p>首先，依次打开“文件 –&gt; 首选项 –&gt; 设置”，就会看到settings.json文件了</p></li><li><p>然后在settings.json中找到“常用设置”里的files.associations对象</p></li><li><p>然后把鼠标滑到对象的左边，会出现如图所示的一个“编辑”的标志，点击它，就会打开右边编辑页，如图：</p></li></ul><p><img src="/2019/04/22/20190422-vscode/2018031918013166.png" alt="编辑"></p><ul><li>按照上图的步骤去配置就可以了，然后再回到.vue的页面，打出div，再按住tab键，就可以自动补全代码了，这里只用写最后一句话就可以了</li></ul><p><img src="/2019/04/22/20190422-vscode/20180319180113710.png" alt="最后一句话"></p><ul><li>可以看到也出现了代码提示功能，你可以选择一个自己想要的，也可以不选，直接按住tab键，就可以生成<code>&lt;p&gt;&lt;/p&gt;</code>了，如下图：</li></ul><p><img src="/2019/04/22/20190422-vscode/20180319180219489.png" alt="p标签提示"></p><ul><li>之后的设置</li></ul><p><img src="/2019/04/22/20190422-vscode/20180319180323841.png" alt="之后的设置"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用vscode编写vue代码，刚开始点击tab是不会自动补全代码的，这个就很郁闷了。&lt;br&gt;百度了半天：&lt;a href=&quot;https://segmentfault.com/a/1190000010339485&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="vscode" scheme="http://shenxf.top/tags/vscode/"/>
    
      <category term="vue" scheme="http://shenxf.top/tags/vue/"/>
    
      <category term="html代码补全" scheme="http://shenxf.top/tags/html%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>常用正则</title>
    <link href="http://shenxf.top/2019/04/17/20190417-regular/"/>
    <id>http://shenxf.top/2019/04/17/20190417-regular/</id>
    <published>2019-04-17T01:36:14.000Z</published>
    <updated>2019-04-17T01:40:13.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ol><li>数字：^[0-9]*$</li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$</li><li>m-n位的数字：^\d{m,n}$</li><li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li><li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</li><li>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</li><li>非负整数：^\d+$ 或 ^[1-9]\d*|0$</li><li>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</li><li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</li><li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$</li><li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</li></ol><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><ol><li>汉字：^[\u4e00-\u9fa5]{0,}$</li><li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</li><li>长度为3-20的所有字符：^.{3,20}$</li><li>由26个英文字母组成的字符串：^[A-Za-z]+$</li><li>由26个大写英文字母组成的字符串：^[A-Z]+$</li><li>由26个小写英文字母组成的字符串：^[a-z]+$</li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li><li>可以输入含有^%&amp;’,;=?$\”等字符：[^%&amp;’,;=?$\x22]+</li><li>禁止输入含有~的字符：[^~\x22]+</li></ol><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ol><li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*$</li><li>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</li><li>InternetURL：[a-zA-z]+://[^\s]<em> 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]</em>)?$</li><li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$ </li><li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li><li>身份证号：<br>15或18位身份证：^\d{15}|\d{18}$<br>15位身份证：^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$<br>18位身份证：^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{4}$</li><li>短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$ </li><li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li><li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li><li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </li><li>钱的输入格式：</li><li>1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$ </li><li>2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </li><li>3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </li><li>4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </li><li>5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$ </li><li>6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ </li><li>7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ </li><li>8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ </li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li><li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li><li>中文字符的正则表达式：[\u4e00-\u9fa5]</li><li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li><li>HTML标记的正则表达式：&lt;(\S<em>?)[^&gt;]</em>&gt;.<em>?|&lt;.</em>? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li><li>首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</li><li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li><li>IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、校验数字的表达式&quot;&gt;&lt;a href=&quot;#一、校验数字的表达式&quot; class=&quot;headerlink&quot; title=&quot;一、校验数字的表达式&quot;&gt;&lt;/a&gt;一、校验数字的表达式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数字：^[0-9]*$&lt;/li&gt;
&lt;li&gt;n位的数字：^\d{n
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="正则" scheme="http://shenxf.top/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL的各种操作</title>
    <link href="http://shenxf.top/2019/04/16/20190416-mysql/"/>
    <id>http://shenxf.top/2019/04/16/20190416-mysql/</id>
    <published>2019-04-16T01:35:29.000Z</published>
    <updated>2019-04-16T02:21:33.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、连接MYSQL。"><a href="#一、连接MYSQL。" class="headerlink" title="一、连接MYSQL。"></a>一、连接MYSQL。</h2><ul><li>格式： mysql -h主机地址 -u用户名 －p用户密码</li></ul><h3 id="1、连接到本机上的MYSQL。"><a href="#1、连接到本机上的MYSQL。" class="headerlink" title="1、连接到本机上的MYSQL。"></a>1、连接到本机上的MYSQL。</h3><ul><li>首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码.</li><li>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</li></ul><h3 id="2、连接到远程主机上的MYSQL。假设远程主机的IP为：110-110-110-110，用户名为root-密码为abcd123。则键入以下命令："><a href="#2、连接到远程主机上的MYSQL。假设远程主机的IP为：110-110-110-110，用户名为root-密码为abcd123。则键入以下命令：" class="headerlink" title="2、连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令："></a>2、连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：</h3><ul><li>mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</li></ul><h3 id="3、退出MYSQL命令：-exit-（回车）"><a href="#3、退出MYSQL命令：-exit-（回车）" class="headerlink" title="3、退出MYSQL命令： exit （回车）"></a>3、退出MYSQL命令： exit （回车）</h3><h2 id="二、修改密码。"><a href="#二、修改密码。" class="headerlink" title="二、修改密码。"></a>二、修改密码。</h2><ul><li>格式：mysqladmin -u用户名 -p旧密码 password 新密码</li></ul><h3 id="1、给root加个密码ab12。首先在DOS下进入目录mysql-bin，然后键入以下命令"><a href="#1、给root加个密码ab12。首先在DOS下进入目录mysql-bin，然后键入以下命令" class="headerlink" title="1、给root加个密码ab12。首先在DOS下进入目录mysql\bin，然后键入以下命令"></a>1、给root加个密码ab12。首先在DOS下进入目录mysql\bin，然后键入以下命令</h3><ul><li>mysqladmin -u root -password ab12</li><li>注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</li></ul><h3 id="2、再将root的密码改为djg345。"><a href="#2、再将root的密码改为djg345。" class="headerlink" title="2、再将root的密码改为djg345。"></a>2、再将root的密码改为djg345。</h3><ul><li>mysqladmin -u root -p ab12 password djg345</li></ul><h2 id="三、增加新用户。"><a href="#三、增加新用户。" class="headerlink" title="三、增加新用户。"></a>三、增加新用户。</h2><ul><li>（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）</li><li>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</li></ul><h3 id="1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令："><a href="#1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：" class="headerlink" title="1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令："></a>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</h3><ul><li>grant select,insert,update,delete on <em>.</em> to test1@”%” Identified by “abc”;</li><li>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</li></ul><h3 id="2、增加一个用户test2密码为abc-让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），"><a href="#2、增加一个用户test2密码为abc-让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），" class="headerlink" title="2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），"></a>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），</h3><ul><li>这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</li><li>grant select,insert,update,delete on mydb.* to test2@localhost identified by “abc”;</li><li>如果你不想test2有密码，可以再打一个命令将密码消掉。</li><li>grant select,insert,update,delete on mydb.* to test2@localhost identified by “”;</li><li>下篇我是MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。</li></ul><h4 id="一、操作技巧"><a href="#一、操作技巧" class="headerlink" title="一、操作技巧"></a>一、操作技巧</h4><ul><li>1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。</li><li><p>也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。</p></li><li><p>2、你可以使用光标上下键调出以前的命令。</p></li></ul><h4 id="二、显示命令"><a href="#二、显示命令" class="headerlink" title="二、显示命令"></a>二、显示命令</h4><ol><li>显示当前数据库服务器中的数据库列表：<br>mysql&gt; SHOW DATABASES;<br>注意：mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</li><li>显示数据库中的数据表：<br>mysql&gt; USE 库名；<br>mysql&gt; SHOW TABLES;</li><li>显示数据表的结构：<br>mysql&gt; DESCRIBE 表名;</li><li>建立数据库：<br>mysql&gt; CREATE DATABASE 库名;</li><li>建立数据表：<br>mysql&gt; USE 库名;<br>mysql&gt; CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));</li><li>删除数据库：<br>mysql&gt; DROP DATABASE 库名;</li><li>删除数据表：<br>mysql&gt; DROP TABLE 表名；</li><li>将表中记录清空：<br>mysql&gt; DELETE FROM 表名;</li><li>显示表中的记录：<br>mysql&gt; SELECT * FROM 表名;</li><li>往表中插入记录：<br>mysql&gt; INSERT INTO 表名 VALUES (”hyq”,”M”);</li><li>更新表中数据：<br>mysql-&gt; UPDATE 表名 SET 字段名1=’a’,字段名2=’b’ WHERE 字段名3=’c’;</li><li>用文本方式将数据装入数据表中：<br>mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;</li><li>导入.sql文件命令：<br>mysql&gt; USE 数据库名;<br>mysql&gt; SOURCE d:/mysql.sql;</li><li>命令行修改root密码：<br>mysql&gt; UPDATE mysql.user SET password=PASSWORD(‘新密码’) WHERE User=’root’;<br>mysql&gt; FLUSH PRIVILEGES;</li><li>显示use的数据库名：<br>mysql&gt; SELECT DATABASE();</li><li>显示当前的user：<br>mysql&gt; SELECT USER();</li></ol><h4 id="三、一个建库和建表以及插入数据的实例"><a href="#三、一个建库和建表以及插入数据的实例" class="headerlink" title="三、一个建库和建表以及插入数据的实例"></a>三、一个建库和建表以及插入数据的实例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> school; //如果存在SCHOOL则删除</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> school; //建立库SCHOOL</span><br><span class="line"><span class="keyword">use</span> school; //打开库SCHOOL</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher (<span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">3</span>) auto_increment <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,<span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,address <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> ‘深圳<span class="string">',year date); //建表结束</span></span><br><span class="line"><span class="string">//以下为插入字段</span></span><br><span class="line"><span class="string">insert into teacher values(”,'</span>allen<span class="string">','</span>大连一中<span class="string">','</span><span class="number">1976</span><span class="number">-10</span><span class="number">-10</span>′);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(”,<span class="string">'jack'</span>,<span class="string">'大连二中'</span>,<span class="string">'1975-12-23′);</span></span><br></pre></td></tr></table></figure><ul><li><p>如果你在mysql提示符键入上面的命令也可以，但不方便调试。</p></li><li><p>（1）你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\下，并在DOS状态进入目录\mysql\bin，然后键入以下命令：</p></li><li>mysql -uroot -p密码 &lt; c:\school.sql</li><li><p>如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</p></li><li><p>（2）或者进入命令行后使用 mysql&gt; source c:\school.sql; 也可以将school.sql文件导入数据库中。</p></li></ul><h4 id="四、将文本数据转到数据库中"><a href="#四、将文本数据转到数据库中" class="headerlink" title="四、将文本数据转到数据库中"></a>四、将文本数据转到数据库中</h4><p>1、文本数据应符合的格式：字段数据之间用tab键隔开，null值用\n来代替.例：<br>3 rose 大连二中 1976-10-10<br>4 mike 大连一中 1975-12-23<br>假设你把这两组数据存为school.txt文件，放在c盘根目录下。<br>2、数据传入命令 load data local infile “c:\school.txt” into table 表名;<br>注意：你最好将文件复制到\mysql\bin目录下，并且要先用use命令打表所在的库。</p><h4 id="五、备份数据库：（命令在DOS的-mysql-bin目录下执行）"><a href="#五、备份数据库：（命令在DOS的-mysql-bin目录下执行）" class="headerlink" title="五、备份数据库：（命令在DOS的\mysql\bin目录下执行）"></a>五、备份数据库：（命令在DOS的\mysql\bin目录下执行）</h4><ol><li>导出整个数据库<br>导出文件默认是存在mysql\bin目录下<br>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名<br>mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</li><li>导出一个表<br>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名<br>mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</li><li>导出一个数据库结构<br>mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql<br>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</li><li>带语言参数导出<br>mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql</li></ol><ul><li>示例</li></ul><ol><li>备份数据库<br>mysqldump -uroot -p test_db &gt; test_db.sql </li><li>恢复数据库<br>mysql -uroot -p test_db &lt; test_db.sql </li><li>创建权限<br>grant all privileges on test_db.* to test_db@’localhost’ identified by ‘123456’;<br>兼容mysql4.1之前模式：<br>update mysql.user set password=old_password(‘123456’) where user=’test_db’; </li><li>忘记密码<br>在“my.cnf”或“my.ini”文件的“mysqld”配置段添加“skip-grant-tables”，然后重新启动mysql即可登录修改root密码。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、连接MYSQL。&quot;&gt;&lt;a href=&quot;#一、连接MYSQL。&quot; class=&quot;headerlink&quot; title=&quot;一、连接MYSQL。&quot;&gt;&lt;/a&gt;一、连接MYSQL。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;格式： mysql -h主机地址 -u用户名 －p用户密码&lt;/l
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="mysql" scheme="http://shenxf.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>less介绍</title>
    <link href="http://shenxf.top/2019/04/03/20190403-art-less/"/>
    <id>http://shenxf.top/2019/04/03/20190403-art-less/</id>
    <published>2019-04-03T01:24:11.000Z</published>
    <updated>2019-04-03T01:48:26.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Less环境安装"><a href="#Less环境安装" class="headerlink" title="Less环境安装"></a>Less环境安装</h2><ul><li>安装nodejs</li><li>在部分win8系统当中无法安装</li><li><p>（解决办法的是  已管理员权限运行cmd然后再按写命令切换到安装包目录，直接命令执行）</p></li><li><p>安装完成nodejs之后</p></li><li>检测是否安装完成   <code>node  –v</code>  查看版本</li><li>然后检测 npm是否自带  <code>npm  –v</code> 查看版本</li><li>在线安装</li><li>然后  运行  <code>npm install –g less</code>  (部分电脑要 sudo 管理权限)<br><img src="/2019/04/03/20190403-art-less/1.png" alt="lessc版本"></li><li><code>Lessc –v</code>  查看版本    是否安装成功</li><li>也可以离线安装，一般没人这么做就不说了</li></ul><h2 id="学习less"><a href="#学习less" class="headerlink" title="学习less"></a>学习less</h2><p><a href="http://lesscss.org/" target="_blank" rel="noopener">官网</a><br><a href="http://lesscss.cn/" target="_blank" rel="noopener">官网中文网</a><br><a href="http://www.1024i.com/demo/less/" target="_blank" rel="noopener">中文非官网</a></p><ul><li><code>Lessc less.less less.css</code>  编译less文件成css</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>CSS（层叠样式表）是一门历史悠久的标记性语言，同 HTML 一道，被广泛应用于万维网（World Wide Web）中。HTML 主要负责文档结构的定义，CSS 负责文档表现形式或样式的定义。</li><li>作为一门标记性语言，CSS 的语法相对简单，对使用者的要求较低，但同时也带来一些问题：CSS 需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码，造成这些困难的很大原因源于 CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。LESS 为 Web 开发者带来了福音，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，LESS 可以让我们用更少的代码做更多的事情。</li></ul><h2 id="LESS-原理及使用方式"><a href="#LESS-原理及使用方式" class="headerlink" title="LESS 原理及使用方式"></a>LESS 原理及使用方式</h2><ul><li>本质上，LESS 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。LESS 并没有裁剪 CSS 原有的特性，更不是用来取代 CSS 的，而是在现有 CSS 语法的基础上，为 CSS 加入程序式语言的特性。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>变量  </li><li>Mixin混入</li><li>嵌套</li><li>Import</li><li>函数（内置函数 运算）</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>LESS 允许开发者自定义变量，变量可以在全局样式中使用，变量使得样式修改起来更加简单。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------变量-----------------*/</span></span><br><span class="line">@mainColor:#E93223;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: @mainColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Mixin混入"><a href="#Mixin混入" class="headerlink" title="Mixin混入"></a>Mixin混入</h2><ul><li>Mixin（混入）功能对用开发者来说并不陌生，很多动态语言都支持 Mixin（混入）特性，它是多重继承的一种实现，在 LESS 中，混入是指在一个 CLASS 中引入另外一个已经定义的 CLASS，就像在当前 CLASS 中增加一个属性一样。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------mixin 混入----------------*/</span></span><br><span class="line"><span class="comment">/*颜色*/</span></span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: @mainColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.redBorder</span>()&#123;</span><br><span class="line">  <span class="attribute">color</span>: @mainColor;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin-class</span>&#123;</span><br><span class="line">  .red();</span><br><span class="line">  <span class="selector-class">.border</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin-fuc</span>&#123;</span><br><span class="line">  .redBorder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><ul><li>在我们书写标准 CSS 的时候，遇到多层的元素嵌套这种情况时，我们要么采用从外到内的选择器嵌套定义，要么采用给特定元素加 CLASS 或 ID 的方式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------------嵌套------------------*/</span></span><br><span class="line"><span class="comment">/*轮播图*/</span></span><br><span class="line"><span class="selector-id">#wjs_banner</span>&#123;</span><br><span class="line">  .carousel-inner&#123;</span><br><span class="line">    &gt; <span class="selector-tag">div</span><span class="selector-class">.item</span>&#123;</span><br><span class="line">      a.img_box&#123;</span><br><span class="line">        background: url("../images/slide_01_2000x410.jpg") no-repeat center center;</span><br><span class="line">        <span class="selector-tag">height</span>: 410<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="comment">/*调用redBorder mixin*/</span></span><br><span class="line">        <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">        <span class="selector-class">.redBorder</span>();</span><br><span class="line">        <span class="comment">/*调用@mainColor 变量*/</span></span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">          <span class="attribute">color</span>: @mainColor;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-class">.img_mobile</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        img&#123;</span><br><span class="line">          <span class="selector-tag">width</span>: 100%;</span><br><span class="line">          <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Import-导入"><a href="#Import-导入" class="headerlink" title="Import 导入"></a>Import 导入</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*---------------------Import 引入------------------------*/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"base"</span>;</span><br><span class="line"><span class="selector-class">.f_left</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: @right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算及函数"><a href="#运算及函数" class="headerlink" title="运算及函数"></a>运算及函数</h2><ul><li>在我们的 CSS 中充斥着大量的数值型的 value，比如 color、padding、margin 等，这些数值之间在某些情况下是有着一定关系的，那么我们怎样利用 LESS 来组织我们这些数值之间的关系呢？</li><li><p><a href="http://www.1024i.com/demo/less/reference.html" target="_blank" rel="noopener">http://www.1024i.com/demo/less/reference.html</a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">escape(@<span class="keyword">string</span>); <span class="comment">// 通过 URL-encoding 编码字符串</span></span><br><span class="line">e(@<span class="keyword">string</span>); <span class="comment">// 对字符串转义</span></span><br><span class="line">%(@<span class="keyword">string</span>, values...); <span class="comment">// 格式化字符串</span></span><br><span class="line">unit(@dimension, [@unit: <span class="string">""</span>]); <span class="comment">// 移除或替换属性值的单位</span></span><br><span class="line">color(@<span class="keyword">string</span>); <span class="comment">// 将字符串解析为颜色值</span></span><br><span class="line">data-uri([mimetype,] url); <span class="comment">// * 将资源内嵌到css中，可能回退到url()</span></span><br><span class="line">ceil(@number); <span class="comment">// 向上取整</span></span><br><span class="line">floor(@number); <span class="comment">// 向下取整</span></span><br><span class="line">percentage(@number); <span class="comment">// 将数字转换为百分比，例如 0.5 -&gt; 50%</span></span><br><span class="line">round(number, [places: <span class="number">0</span>]); <span class="comment">// 四舍五入取整</span></span><br><span class="line">sqrt(number); <span class="comment">// * 计算数字的平方根</span></span><br><span class="line">abs(number); <span class="comment">// * 数字的绝对值</span></span><br><span class="line">sin(number); <span class="comment">// * sin函数</span></span><br><span class="line">asin(number); <span class="comment">// * arcsin函数</span></span><br><span class="line">cos(number); <span class="comment">// * cos函数</span></span><br><span class="line">acos(number); <span class="comment">// * arccos函数</span></span><br><span class="line">tan(number); <span class="comment">// * tan函数</span></span><br><span class="line">atan(number); <span class="comment">// * arctan函数</span></span><br><span class="line">pi(); <span class="comment">// * 返回PI</span></span><br><span class="line">pow(@<span class="keyword">base</span>, @exponent); <span class="comment">// * 返回@base的@exponent次方</span></span><br><span class="line">mod(number, number); <span class="comment">// * 第一个参数对第二个参数取余</span></span><br><span class="line">convert(number, units); <span class="comment">// * 在数字之间转换</span></span><br><span class="line">unit(number, units); <span class="comment">// * 不转换的情况下替换数字的单位</span></span><br><span class="line">color(<span class="keyword">string</span>); <span class="comment">// 将字符串或者转义后的值转换成颜色</span></span><br><span class="line">rgb(@r, @g, @b); <span class="comment">// 转换为颜色值</span></span><br><span class="line">rgba(@r, @g, @b, @a); <span class="comment">// 转换为颜色值</span></span><br><span class="line">argb(@color); <span class="comment">// 创建 #AARRGGBB 格式的颜色值</span></span><br><span class="line">hsl(@hue, @saturation, @lightness); <span class="comment">// 创建颜色值</span></span><br><span class="line">hsla(@hue, @saturation, @lightness, @alpha); <span class="comment">// 创建颜色值</span></span><br><span class="line">hsv(@hue, @saturation, @<span class="keyword">value</span>); <span class="comment">// 创建颜色值</span></span><br><span class="line">hsva(@hue, @saturation, @<span class="keyword">value</span>, @alpha); <span class="comment">// 创建颜色值</span></span><br><span class="line">hue(@color); <span class="comment">// 从颜色值中提取 hue 值（色相）</span></span><br><span class="line">saturation(@color); <span class="comment">// 从颜色值中提取 saturation 值（饱和度）</span></span><br><span class="line">lightness(@color); <span class="comment">// 从颜色值中提取 'lightness' 值（亮度）</span></span><br><span class="line">hsvhue(@color); <span class="comment">// * 从颜色中提取 hue 值，以HSV色彩空间表示（色相）</span></span><br><span class="line">hsvsaturation(@color); <span class="comment">// * 从颜色中提取 saturation 值，以HSV色彩空间表示（饱和度）</span></span><br><span class="line">hsvvalue(@color); <span class="comment">// * 从颜色中提取 value 值，以HSV色彩空间表示（色调）</span></span><br><span class="line">red(@color); <span class="comment">// 从颜色值中提取 'red' 值（红色）</span></span><br><span class="line">green(@color); <span class="comment">// 从颜色值中提取 'green' 值（绿色）</span></span><br><span class="line">blue(@color); <span class="comment">// 从颜色值中提取 'blue' 值（蓝色）</span></span><br><span class="line">alpha(@color); <span class="comment">// 从颜色值中提取 'alpha' 值（透明度）</span></span><br><span class="line">luma(@color); <span class="comment">// 从颜色值中提取 'luma' 值（亮度的百分比表示法）</span></span><br><span class="line">saturate(@color, <span class="number">10</span>%); <span class="comment">// 饱和度增加 10%</span></span><br><span class="line">desaturate(@color, <span class="number">10</span>%); <span class="comment">// 饱和度降低 10%</span></span><br><span class="line">lighten(@color, <span class="number">10</span>%); <span class="comment">// 亮度增加 10%</span></span><br><span class="line">darken(@color, <span class="number">10</span>%); <span class="comment">// 亮度降低 10%</span></span><br><span class="line">fadein(@color, <span class="number">10</span>%); <span class="comment">// 透明度增加 10%</span></span><br><span class="line">fadeout(@color, <span class="number">10</span>%); <span class="comment">// 透明度降低 10%</span></span><br><span class="line">fade(@color, <span class="number">50</span>%); <span class="comment">// 设定透明度为 50%</span></span><br><span class="line">spin(@color, <span class="number">10</span>); <span class="comment">// 色相值增加 10</span></span><br><span class="line">mix(@color1, @color2, [@weight: <span class="number">50</span>%]); <span class="comment">// 混合两种颜色</span></span><br><span class="line">greyscale(@color); <span class="comment">// 完全移除饱和度，输出灰色</span></span><br><span class="line">contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: <span class="number">43</span>%]); <span class="comment">// 如果 @color1 的 luma 值 &gt; 43% 输出 @darkcolor，否则输出 @lightcolor</span></span><br><span class="line">multiply(@color1, @color2);</span><br><span class="line">screen(@color1, @color2);</span><br><span class="line">overlay(@color1, @color2);</span><br><span class="line">softlight(@color1, @color2);</span><br><span class="line">hardlight(@color1, @color2);</span><br><span class="line">difference(@color1, @color2);</span><br><span class="line">exclusion(@color1, @color2);</span><br><span class="line">average(@color1, @color2);</span><br><span class="line">negation(@color1, @color2);</span><br><span class="line">iscolor(@colorOrAnything); <span class="comment">// 判断一个值是否是颜色</span></span><br><span class="line">isnumber(@numberOrAnything); <span class="comment">// 判断一个值是否是数字（可含单位）</span></span><br><span class="line">isstring(@stringOrAnything); <span class="comment">// 判断一个值是否是字符串</span></span><br><span class="line">iskeyword(@keywordOrAnything); <span class="comment">// 判断一个值是否是关键字</span></span><br><span class="line">isurl(@urlOrAnything); <span class="comment">// 判断一个值是否是url</span></span><br><span class="line">ispixel(@pixelOrAnything); <span class="comment">// 判断一个值是否是以px为单位的数值</span></span><br><span class="line">ispercentage(@percentageOrAnything); <span class="comment">// 判断一个值是否是百分数</span></span><br><span class="line">isem(@emOrAnything); <span class="comment">// 判断一个值是否是以em为单位的数值</span></span><br><span class="line">isunit(@numberOrAnything, <span class="string">"rem"</span>); <span class="comment">// * 判断一个值是否是指定单位的数值</span></span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-------------------运算和函数--------------------------*/</span></span><br><span class="line">@back:#333;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid @back*<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">lighten</span>(#000, 10%);</span><br><span class="line">  <span class="attribute">color</span>:<span class="built_in">darken</span>(#000, 10%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Less在浏览器上使用的方法"><a href="#Less在浏览器上使用的方法" class="headerlink" title="Less在浏览器上使用的方法"></a>Less在浏览器上使用的方法</h2><ul><li>请参照官网，less提供了js文件，能够在html里面直接运行less，但是这是有代价的，会有一定的编译开销，一般用在开发或则学习的时候，作为产品最好不要这么用。</li><li><p>样式部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.less"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>script部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"less.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Less环境安装&quot;&gt;&lt;a href=&quot;#Less环境安装&quot; class=&quot;headerlink&quot; title=&quot;Less环境安装&quot;&gt;&lt;/a&gt;Less环境安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装nodejs&lt;/li&gt;
&lt;li&gt;在部分win8系统当中无法安装&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="less" scheme="http://shenxf.top/tags/less/"/>
    
      <category term="less环境安装" scheme="http://shenxf.top/tags/less%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
      <category term="less语法" scheme="http://shenxf.top/tags/less%E8%AF%AD%E6%B3%95/"/>
    
      <category term="Mixin" scheme="http://shenxf.top/tags/Mixin/"/>
    
  </entry>
  
  <entry>
    <title>hexo教程：github page+独立域名搭建(1)</title>
    <link href="http://shenxf.top/2019/04/02/20190402-hexo-blog1/"/>
    <id>http://shenxf.top/2019/04/02/20190402-hexo-blog1/</id>
    <published>2019-04-02T02:07:57.000Z</published>
    <updated>2019-04-03T02:18:11.415Z</updated>
    
    <content type="html"><![CDATA[<p>现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。</p><p>而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。</p><p>那么就有第三种选择，直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><ul><li>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</li></ul><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h2><ul><li><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程</p></li><li><p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p></li><li><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><ul><li>安装好后，用git –version 来查看一下版本</li></ul><h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h2><ul><li><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p></li><li><p>windows：nodejs选择LTS版本就行了。</p></li><li><p>linux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure></li><li><p>安装完后，打开命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>检查一下有没有安装成功</p></li><li><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p></li></ul><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><ul><li><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p></li><li><p>输入命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li><p>依旧用<code>hexo -v</code>查看一下版本</p></li><li><p>至此就全部安装完了。</p></li><li><p>接下来初始化一下hexo</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><ul><li>这个myblog可以自己取什么名字都行，然后</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ul></li><li><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p></li><li><p>大概长这样：<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="大概长这样"></p></li><li><p>使用ctrl+c可以把服务关掉。</p></li></ul><h2 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h2><ul><li><p>首先，你先要有一个GitHub账户，去注册一个吧。</p></li><li><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstcm7ej20ei0c1aah.jpg" alt="新建仓库"></p></li></ul><ul><li>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstusrdj20iw0o4myp.jpg" alt="github.io"></li></ul><ul><li>点击create repository。</li></ul><h2 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h2><ul><li>回到你的git bash中，</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "yourname"</span><br><span class="line">git config --global user.email "youremail"</span><br></pre></td></tr></table></figure><ul><li><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p></li><li><p>可以用以下两条，检查一下你有没有输对</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><ul><li>然后创建SSH,一路回车</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "youremail"</span><br></pre></td></tr></table></figure><ul><li>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstd106j20kb073gll.jpg" alt=".ssh文件夹"></li></ul><ul><li><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p></li><li><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstdifaj210s0gfjrz.jpg" alt="id_rsa.pub"></p></li></ul><ul><li>在gitbash中，查看是否成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h2><ul><li>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为</li><li>YourgithubName就是你的GitHub账户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>然后</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li>其中 hexo clean清除了你之前生成的东西，也可以不加。</li><li>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写</li><li><p>hexo deploy 部署文章，可以用hexo d缩写</p></li><li><p>注意deploy时可能要你输入username和password。</p></li><li><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> 这个网站看到你的博客了！！</p></li></ul><h2 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h2><ul><li><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p></li><li><p>注册一个阿里云账户,在阿里云上买一个域名，我买的是 fangzh.top，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p></li><li><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p></li><li><p>点解析进去，添加解析。<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstcu8xj20d607wdfw.jpg" alt="添加解析"></p></li></ul><ul><li>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。</li><li>注意，解析线路选择<strong>默认</strong>，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择默认！！<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstf8unj20ob05b0sq.jpg" alt="解析"></li></ul><ul><li>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>fangzh.top</code><br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstghklj20as04mt8n.jpg" alt="fangzh.top"></li></ul><ul><li>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。<br><img src="/2019/04/02/20190402-hexo-blog1/d40b6c29gy1fvrkstgsyrj208806aq2z.jpg" alt="cname"></li></ul><ul><li>最后，在gitbash中，输入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p></li><li><p>接下来你就可以正式开始写文章了。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure><ul><li>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li><p>就可以看到更新了。</p></li><li><p>至于更换网站主题，还有添加各种各样的功能等等，在往后的系列博客中，再进行介绍。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。&lt;/p&gt;
&lt;p&gt;而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自
      
    
    </summary>
    
      <category term="博客" scheme="http://shenxf.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://shenxf.top/tags/hexo/"/>
    
      <category term="博客" scheme="http://shenxf.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="博客搭建" scheme="http://shenxf.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="教程" scheme="http://shenxf.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="blog" scheme="http://shenxf.top/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>使用 typeScript 开发的搭配</title>
    <link href="http://shenxf.top/2019/04/01/20190401-nodejs-typeScript/"/>
    <id>http://shenxf.top/2019/04/01/20190401-nodejs-typeScript/</id>
    <published>2019-04-01T09:31:35.000Z</published>
    <updated>2019-04-01T09:39:31.624Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在 TypeScript 代码中看到后台编程的一些影子，它是  javaScript 的升华。所以借学习 TypeScript 的机会再回过头来看如何在 Node 中用它来开发。</li></ul><h2 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h2><h3 id="1-1、-建立-node-项目"><a href="#1-1、-建立-node-项目" class="headerlink" title="1.1、 建立 node 项目"></a>1.1、 建立 node 项目</h3><ul><li>使用终端工具，在项目的根目录（注意是空目录）中执行“npm init -y”命令创建一个“package.json”的文件，文件中的基本信息为：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"nodejs"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    // npm run start</span><br><span class="line">    "start": "node ./build/hello",</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接着引入 node 的运行定义文件，引入的命令是“npm i @types/node –save”。</p></li><li><p>npm 不加配置的话是原生镜像地址，会涉及翻墙的问题，使用以下淘宝镜像可解决：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/node --registry=http://registry.npm.taobao.org</span><br><span class="line">npm install typescript --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="1-2、创建“tsconfig-json”"><a href="#1-2、创建“tsconfig-json”" class="headerlink" title="1.2、创建“tsconfig.json”"></a>1.2、创建“tsconfig.json”</h3><ul><li>node 本身是不认 typeScript 语言的，所以要将 typeScript 编译成 javaScript，所以在项目的根目录就要创建一个“tsconfig.json”，这个文件是用来告诉编译器如何将 typeScript 编译成 javaScript。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 编译器的配置</span><br><span class="line">  "compilerOptions": &#123;</span><br><span class="line">    // 指定生成哪个模块系统代码</span><br><span class="line">    "module": "commonjs",</span><br><span class="line">    // 目标代码类型</span><br><span class="line">    "target": "es5",</span><br><span class="line">    // emitDecoratorMetadata 和 experimentalDecorators 是与装饰器相关的</span><br><span class="line">    // 在编译的时候保留装饰器里面的原数据</span><br><span class="line">    "emitDecoratorMetadata": true,</span><br><span class="line">    "experimentalDecorators": true,</span><br><span class="line">    // 在表达式和声明上有隐含的'any'类型时报错。</span><br><span class="line">    "noImplicitAny": false,</span><br><span class="line">    // 用于debug</span><br><span class="line">    "sourceMap": false,</span><br><span class="line">    // 仅用来控制输出的目录结构--outDir。</span><br><span class="line">    "rootDir": "./src",</span><br><span class="line">    // 编译完后要放在哪个文件夹里面</span><br><span class="line">    "outDir": "./build",</span><br><span class="line">    // 在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。</span><br><span class="line">    "watch": true,</span><br><span class="line">    // 开发的时候要使用 es6 的语法</span><br><span class="line">    "lib": ["es6"]</span><br><span class="line">  &#125;,</span><br><span class="line">  "include": [</span><br><span class="line">    <span class="string">"./src/**/*"</span></span><br><span class="line">  ],</span><br><span class="line">  // 排除编译的时候哪些个文件要排除掉</span><br><span class="line">  "exclude": [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">    "views",</span><br><span class="line">    <span class="string">"static"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在编辑完“tsconfig.json”之后，如果你使用的也是 WebStorm 编辑器，通过“setting”来设置让 IDE 知道要使用这个配置文件作为配置来编译 TypeScript 。</li></ul><p><img src="/2019/04/01/20190401-nodejs-typeScript/QQ截图20171213093803.png" alt="图1：配置步骤"></p><h2 id="二、测试项目的正常启动"><a href="#二、测试项目的正常启动" class="headerlink" title="二、测试项目的正常启动"></a>二、测试项目的正常启动</h2><h3 id="2-1、在“src-hello-ts”中输入代码"><a href="#2-1、在“src-hello-ts”中输入代码" class="headerlink" title="2.1、在“src/hello.ts”中输入代码"></a>2.1、在“src/hello.ts”中输入代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> http <span class="keyword">from</span> <span class="string">'http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.end(<span class="string">'Hello Node!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2、在终端中输入启动服务命令"><a href="#2-2、在终端中输入启动服务命令" class="headerlink" title="2.2、在终端中输入启动服务命令"></a>2.2、在终端中输入启动服务命令</h3><p>node build/hello.js</p><h3 id="2-3、在浏览器中输入“http-localhost-3000-”运行后的效果"><a href="#2-3、在浏览器中输入“http-localhost-3000-”运行后的效果" class="headerlink" title="2.3、在浏览器中输入“http://localhost:3000/”运行后的效果"></a>2.3、在浏览器中输入“<a href="http://localhost:3000/”运行后的效果" target="_blank" rel="noopener">http://localhost:3000/”运行后的效果</a></h3><p><img src="/2019/04/01/20190401-nodejs-typeScript/QQ截图20171213095344.png" alt="图2、运行后的效果"></p><h2 id="三、简单的路由"><a href="#三、简单的路由" class="headerlink" title="三、简单的路由"></a>三、简单的路由</h2><h3 id="3-1、引入“express”依赖库"><a href="#3-1、引入“express”依赖库" class="headerlink" title="3.1、引入“express”依赖库"></a>3.1、引入“express”依赖库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h3 id="3-2、在入口的-TS-文件里面输入代码"><a href="#3-2、在入口的-TS-文件里面输入代码" class="headerlink" title="3.2、在入口的 TS 文件里面输入代码"></a>3.2、在入口的 TS 文件里面输入代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.end(<span class="string">'This is Home!'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/users'</span>, (req, res) =&gt; res.end(<span class="string">'This is User!'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">'localhost'</span>;</span><br><span class="line"><span class="keyword">const</span> serv = app.listen(port, host, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server start, address: http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3、简单的传参路由"><a href="#3-3、简单的传参路由" class="headerlink" title="3.3、简单的传参路由"></a>3.3、简单的传参路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span>  bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"><span class="comment">// 静态资源文件，例如图片、CSS、JavaScript 文件等</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'static'</span>)));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.end(<span class="string">'This is home!'</span>));</span><br><span class="line">app.get(<span class="string">'/users'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(users);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/users/:id'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(users.find(<span class="function">(<span class="params">user</span>)=&gt;</span>user.id == req.params.id));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serv = app.listen(<span class="number">3000</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> host = serv.address().address;</span><br><span class="line">    <span class="keyword">const</span> port = serv.address().port;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server start, address: http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(public id: number,</span><br><span class="line">                public name: string) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users: User[] = [</span><br><span class="line">    <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">'张三'</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">'李四'</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">'王五'</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在 TypeScript 代码中看到后台编程的一些影子，它是  javaScript 的升华。所以借学习 TypeScript 的机会再回过头来看如何在 Node 中用它来开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一、配置环境&quot;&gt;&lt;a href=&quot;#一、配置
      
    
    </summary>
    
      <category term="nodejs" scheme="http://shenxf.top/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://shenxf.top/tags/nodejs/"/>
    
      <category term="typescript" scheme="http://shenxf.top/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>工作中 99% 能用到的 git 命令</title>
    <link href="http://shenxf.top/2019/04/01/20190401-gitCommand/"/>
    <id>http://shenxf.top/2019/04/01/20190401-gitCommand/</id>
    <published>2019-04-01T04:42:37.000Z</published>
    <updated>2019-04-01T04:47:54.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ol><li>git branch：创建分支</li><li>git branch -b：创建并切换到新建的分支上</li><li>git checkout：切换分支</li><li>git branch：查看分支列表</li><li>git branch -v：查看所有分支的最后一次操作</li><li>git branch -vv：查看当前分支</li><li>git brabch -b 分支名 origin/分支名：创建远程分支到本地</li><li>git branch –merged：查看别的分支和当前分支合并过的分支</li><li>git branch –no-merged：查看未与当前分支合并的分支</li><li>git branch -d 分支名：删除本地分支</li><li>git branch -D 分支名：强行删除分支</li><li>git branch origin 分支名：删除远处仓库分支</li><li>git merge 分支名：合并分支到当前分支上</li></ol><h2 id="暂存操作"><a href="#暂存操作" class="headerlink" title="暂存操作"></a>暂存操作</h2><ol><li>git stash：暂存当前修改</li><li>git stash apply：恢复最近的一次暂存</li><li>git stash pop：恢复暂存并删除暂存记录</li><li>git stash list：查看暂存列表</li><li>git stash drop 暂存名(例：stash@{0})：移除某次暂存</li><li>git stash clear：清除暂存</li></ol><h2 id="回退操作"><a href="#回退操作" class="headerlink" title="回退操作"></a>回退操作</h2><ol><li>git reset –hard HEAD^：回退到上一个版本</li><li>git reset –hard ahdhs1(commit_id)：回退到某个版本</li><li>git checkout – file：撤销修改的文件（如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态）</li><li>git reset HEAD file：撤回暂存区的文件修改到工作区</li></ol><h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><ol><li>git tag 标签名：添加标签(默认对当前版本)</li><li>git tag 标签名 commit_id：对某一提交记录打标签</li><li>git tag -a 标签名 -m ‘描述’：创建新标签并增加备注</li><li>git tag：列出所有标签列表</li><li>git show 标签名：查看标签信息</li><li>git tag -d 标签名：删除本地标签</li><li>git push origin 标签名：推送标签到远程仓库</li><li>git push origin –tags：推送所有标签到远程仓库</li><li>git push origin :refs/tags/标签名：从远程仓库中删除标签</li></ol><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><ol><li>git push origin test：推送本地分支到远程仓库</li><li>git rm -r –cached 文件/文件夹名字：取消文件被版本控制</li><li>git reflog：获取执行过的命令</li><li>git log –graph：查看分支合并图</li><li>git merge –no-ff -m ‘合并描述’ 分支名：不使用Fast forward方式合并，采用这种方式合并可以看到合并记录</li><li>git check-ignore -v 文件名：查看忽略规则</li><li>git add -f 文件名：强制将文件提交</li></ol><h2 id="git创建项目仓库"><a href="#git创建项目仓库" class="headerlink" title="git创建项目仓库"></a>git创建项目仓库</h2><ol><li>git init：初始化</li><li>git remote add origin url：关联远程仓库</li><li>git pull</li><li>git fetch：获取远程仓库中所有的分支到本地</li></ol><h2 id="忽略已加入到版本库中的文件"><a href="#忽略已加入到版本库中的文件" class="headerlink" title="忽略已加入到版本库中的文件"></a>忽略已加入到版本库中的文件</h2><ul><li>git update-index –assume-unchanged file：忽略单个文件</li></ul><h2 id="取消忽略文件"><a href="#取消忽略文件" class="headerlink" title="取消忽略文件"></a>取消忽略文件</h2><ul><li>git update-index –no-assume-unchanged file</li></ul><h2 id="拉取-上传免密码"><a href="#拉取-上传免密码" class="headerlink" title="拉取. 上传免密码"></a>拉取. 上传免密码</h2><ul><li>git config –global credential.helper store</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分支操作&quot;&gt;&lt;a href=&quot;#分支操作&quot; class=&quot;headerlink&quot; title=&quot;分支操作&quot;&gt;&lt;/a&gt;分支操作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;git branch：创建分支&lt;/li&gt;
&lt;li&gt;git branch -b：创建并切换到新建的分支上&lt;/li&gt;
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="git" scheme="http://shenxf.top/tags/git/"/>
    
      <category term="命令" scheme="http://shenxf.top/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="commond" scheme="http://shenxf.top/tags/commond/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 入门系列1</title>
    <link href="http://shenxf.top/2019/04/01/20190401-nodejs-Introduction1/"/>
    <id>http://shenxf.top/2019/04/01/20190401-nodejs-Introduction1/</id>
    <published>2019-04-01T03:10:21.000Z</published>
    <updated>2019-04-01T04:36:09.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结1"><a href="#总结1" class="headerlink" title="总结1"></a>总结1</h2><ul><li>Node.js 是什么<ul><li>JavaScript 运行时</li><li>既不是语言，也不是框架，它是一个平台</li></ul></li><li>Node.js 中的 JavaScript<ul><li>没有 BOM、DOM</li><li>EcmaScript 基本的 JavaScript 语言部分</li><li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul><li>文件操作的能力</li><li>http 服务的能力</li></ul></li></ul></li></ul><h2 id="总结2"><a href="#总结2" class="headerlink" title="总结2"></a>总结2</h2><ul><li>Node 中的 JavaScript<ul><li>EcmaScript<ul><li>变量</li><li>方法</li><li>数据类型</li><li>内置对象</li><li>Array</li><li>Object</li><li>Date</li><li>Math</li></ul></li><li>模块系统<ul><li>在 Node 中没有全局作用域的概念</li><li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li><li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul><li>模块完全是封闭的</li><li>外部无法访问内部</li><li>内部也无法访问外部</li></ul></li><li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li><li>但是某些情况下，模块与模块是需要进行通信的</li><li>在每个模块中，都提供了一个对象：<code>exports</code></li><li>该对象默认是一个空对象</li><li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li><li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li><li>还有其它的一些规则，具体后面讲，以及如何在项目中去使用这种编程方式，会通过后面的案例来处理</li></ul></li><li>核心模块<ul><li>核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如<ul><li>fs 文件操作模块</li><li>http 网络服务构建模块</li><li>os 操作系统信息模块</li><li>path 路径处理模块</li><li>。。。。</li></ul></li><li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul><li><code>var fs = require(&#39;fs&#39;)</code></li></ul></li></ul></li></ul></li><li><p>http</p><ul><li>require</li><li>端口号<ul><li>ip 地址定位计算机</li><li>端口号定位具体的应用程序</li></ul></li><li>Content-Type<ul><li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li><li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li><li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li></ul></li><li>通过网络发送文件<ul><li>发送的并不是文件，本质上来讲发送是文件的内容</li><li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</li></ul></li></ul></li><li><p>模块系统</p></li><li>Node 中的其它的核心模块</li><li>Express Web 开发框架<ul><li><code>npm install express</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总结1&quot;&gt;&lt;a href=&quot;#总结1&quot; class=&quot;headerlink&quot; title=&quot;总结1&quot;&gt;&lt;/a&gt;总结1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js 是什么&lt;ul&gt;
&lt;li&gt;JavaScript 运行时&lt;/li&gt;
&lt;li&gt;既不是语言，也不是框架，它是一个
      
    
    </summary>
    
      <category term="nodejs" scheme="http://shenxf.top/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://shenxf.top/tags/nodejs/"/>
    
      <category term="入门系列1" scheme="http://shenxf.top/tags/%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%971/"/>
    
  </entry>
  
  <entry>
    <title>Hexo百度主动提交链接</title>
    <link href="http://shenxf.top/2019/03/29/20190329-seo/"/>
    <id>http://shenxf.top/2019/03/29/20190329-seo/</id>
    <published>2019-03-29T04:39:29.000Z</published>
    <updated>2019-03-29T05:06:25.467Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>首先可以你需要了解下百度站长平台页面抓取栏的推送说明</p></li><li><p>上个效果图：</p></li></ul><p><img src="/2019/03/29/20190329-seo/1819713-f911ee21bca08a56.webp" alt="效果图"></p><ul><li>以下两种方式都可以推送，可以使用其中一种，也可以两种都使用<ul><li>自动推送</li><li>一般在目录blog\themes\hiker\layout_partial\head.ejs中加入JS，这样全站都有了：</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><ul><li><p>感谢作者：<a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">https://github.com/huiwang/hexo-baidu-url-submit</a></p></li><li><p>作用：某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。除此之外， 使用主动推送还会达到如下功效：</p><ul><li>及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录</li><li>保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现</li></ul></li></ul><h2 id="安装hexo-baidu-url-submit插件"><a href="#安装hexo-baidu-url-submit插件" class="headerlink" title="安装hexo-baidu-url-submit插件"></a>安装hexo-baidu-url-submit插件</h2><ul><li><p>首先，在Hexo根目录下，安装本插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure></li><li><p>请注意， 本插件的配置文件中包含秘钥， 请把您的Hexo博客源文件托管到私有仓库里。</p></li></ul><h2 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h2><ul><li>同样在根目录下，把以下内容配置到_config.yml文件中:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 3 ## 比如3，代表提交最新的三个链接</span><br><span class="line">  host: shenxf.top ## 在百度站长平台中注册的域名</span><br><span class="line">  token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure></li></ul><h2 id="检查url"><a href="#检查url" class="headerlink" title="检查url"></a>检查url</h2><ul><li><p>其次，记得查看_config.yml文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> URL</span><br><span class="line">url: http://shenxf.top</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure></li><li><p>最后，加入新的deployer:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">    coding: https://用户名:密码@git.coding.net/TinyJay/blog.git,master</span><br><span class="line">- type: baidu_url_submitter</span><br></pre></td></tr></table></figure></li><li><p>执行hexo deploy的时候，新的链接就会被推送了。</p></li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>推送功能的实现，分为两部分：</li><li>新链接的产生，hexo generate会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交，hexo deploy会从上述文件中读取链接，提交至百度搜索引擎。</li><li>链接参考：<a href="http://guoyanjun.top/" target="_blank" rel="noopener">http://guoyanjun.top/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先可以你需要了解下百度站长平台页面抓取栏的推送说明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上个效果图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/29/20190329-seo/1819713-f911ee21bca08a5
      
    
    </summary>
    
      <category term="博客" scheme="http://shenxf.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://shenxf.top/tags/Hexo/"/>
    
      <category term="百度主动提交链接" scheme="http://shenxf.top/tags/%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/"/>
    
      <category term="seo" scheme="http://shenxf.top/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>使用vscode时，如何在.vue文件中使用html代码补全功能</title>
    <link href="http://shenxf.top/2019/03/26/article/"/>
    <id>http://shenxf.top/2019/03/26/article/</id>
    <published>2019-03-26T01:58:54.000Z</published>
    <updated>2019-03-26T02:03:26.511Z</updated>
    
    <content type="html"><![CDATA[<p>使用vscode编写vue代码，刚开始点击tab是不会自动补全代码的，这个就很郁闷了。<br>百度了半天：<a href="https://segmentfault.com/a/1190000010339485" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010339485</a> 参考这个最后解决了问题</p><h2 id="一、HTML-Snippets"><a href="#一、HTML-Snippets" class="headerlink" title="一、HTML Snippets"></a>一、HTML Snippets</h2><ul><li>在vscode中把这个插件下载了并且启用，然后翻阅插件的ReadMe，我们可以看到如下图得FAQ:</li></ul><p><img src="/2019/03/26/article/20180319180501532.png" alt="FAQ"></p><ul><li>这段代码是提示我们需要在settings.json中配置files.associations的属性。</li></ul><h2 id="二、settings-json中配置files-associations对象"><a href="#二、settings-json中配置files-associations对象" class="headerlink" title="二、settings.json中配置files.associations对象"></a>二、settings.json中配置files.associations对象</h2><ul><li><p>首先，依次打开“文件 –&gt; 首选项 –&gt; 设置”，就会看到settings.json文件了</p></li><li><p>然后在settings.json中找到“常用设置”里的files.associations对象</p></li><li><p>然后把鼠标滑到对象的左边，会出现如图所示的一个“编辑”的标志，点击它，就会打开右边编辑页，如图：</p></li></ul><p><img src="/2019/03/26/article/2018031918013166.png" alt="编辑"></p><ul><li>按照上图的步骤去配置就可以了，然后再回到.vue的页面，打出div，再按住tab键，就可以自动补全代码了，这里只用写最后一句话就可以了</li></ul><p><img src="/2019/03/26/article/20180319180113710.png" alt="最后一句话"></p><ul><li>可以看到也出现了代码提示功能，你可以选择一个自己想要的，也可以不选，直接按住tab键，就可以生成<code>&lt;p&gt;&lt;/p&gt;</code>了，如下图：</li></ul><p><img src="/2019/03/26/article/20180319180219489.png" alt="p标签提示"></p><ul><li>之后的设置</li></ul><p><img src="/2019/03/26/article/20180319180323841.png" alt="之后的设置"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用vscode编写vue代码，刚开始点击tab是不会自动补全代码的，这个就很郁闷了。&lt;br&gt;百度了半天：&lt;a href=&quot;https://segmentfault.com/a/1190000010339485&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="文章" scheme="http://shenxf.top/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="vscode" scheme="http://shenxf.top/tags/vscode/"/>
    
      <category term="html代码补全功能" scheme="http://shenxf.top/tags/html%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Google Adsense(谷歌网站联盟)广告申请指南</title>
    <link href="http://shenxf.top/2019/03/21/201903211/"/>
    <id>http://shenxf.top/2019/03/21/201903211/</id>
    <published>2019-03-21T09:35:35.000Z</published>
    <updated>2019-03-29T05:03:26.249Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.williamlong.info/adsense/" target="_blank" rel="noopener">https://www.williamlong.info/adsense/</a></p><p>Google AdSense 是一种获取收入的快速简便的方法，适合于各种规模的网站发布商。它可以在网站的内容网页上展示相关性较高的 Google 广告，并且这些广告不会过分夸张醒目。由于所展示的广告同用户在您的网站上查找的内容相关，因此，最终您的内容网页不仅会为您带来经济效益，还能够得以充实。</p><h2 id="一、注册Google-AdSense"><a href="#一、注册Google-AdSense" class="headerlink" title="一、注册Google AdSense"></a>一、注册Google AdSense</h2><p>如果以前注册过Google AdWords（Google广告词——对关键字进行右侧付费推广）那么就能使用您的Google AdWords密码登录，开通Google AdSense了。</p><p>Google提示不支持中文，注册时填写拼音</p><p>需要填写</p><p>您输入的帐户信息如下：（XX代表隐藏站长的信息）</p><p>收款人：Wang Xiaobo或Xiaobo Wang（这个信息一定不能错，一旦提交永远不得更改。姓、名顺序可以按中文习惯，也可以按英语习惯颠倒过来）<br>地址：Room 102, Building 3<br>地址（延续）：Hua Xi Cun 2#<br>城市：Nanjing<br>州、省或地区：Jiangsu<br>邮政编码：210000<br>国家/地区：中国<br>电话：+86-25-85412654（注意：国家代码和区号前不要加0）<br>产品：AdSense for content（针对内容的AdSense）和AdSense for search（针对搜索的AdSense）<br>网站：<a href="http://www.XXX.com" target="_blank" rel="noopener">www.XXX.com</a><br>网站语言：中文（简体）</p><p>请在继续前确认所有信息都是正确的。<br>在此之后不能更改付款人姓名或国家/地区名称。</p><p>　 </p><h2 id="二、等待Google来信"><a href="#二、等待Google来信" class="headerlink" title="二、等待Google来信"></a>二、等待Google来信</h2><p>等了两天，Google来信如下：</p><p>标题：欢迎光临_Google_AdSense<br>祝贺您！</p><p>您的 Google AdSense 申请已得到批准。现在，您可以启用帐户，几分钟后就会开始向您的网站投放 Google 广告和提供 AdSense for search （针对搜索的<br>AdSense）。</p><p>第 1 步：启用帐户。<br>请访问 <a href="https://www.google.com/adsense?hl=zh_CN，然后使用申请中所提交的电子邮件地址和密码登录到自己的帐户，并选择同意" target="_blank" rel="noopener">https://www.google.com/adsense?hl=zh_CN，然后使用申请中所提交的电子邮件地址和密码登录到自己的帐户，并选择同意</a> AdSense 条款。</p><p>第 2 步：将 AdSense 代码粘贴到您的网页。<br>只需按照“广告布局代码”页和“搜索代码”页中的说明进行*作，即可将 Google 代码复制并粘贴到您的网站中。几分钟后就会开始向您的网站投放 Google 广告和提<br>供 AdSense for search。</p><p>第 3 步：查看结果。<br>广告开始投放后，您就可以通过自己帐户中的在线报告随时查看收入情况。请注意，如果您的网站中包含以下任一内容，都有可能无法从 AdSense 中获得最大收<br>入：</p><ul><li>robots.txt</li><li>框架</li><li>表单与动态内容</li><li>过多的图像</li><li>要求登录和输入密码</li></ul><p>有关针对此计划优化网站的更多技术指南与建议，请访问：<br><a href="https://www.google.com/adsense/faq-tech?hl=zh_CN" target="_blank" rel="noopener">https://www.google.com/adsense/faq-tech?hl=zh_CN</a></p><p>重要注意事项：</p><ul><li><p>如果 Google 尚未抓取您的网站，则可能需要数小时才能看到有针对性的广告。<br>您在此期间可能会看到公益广告（这些广告无法为您带来任何收入）。</p></li><li><p>如果您的网页还未列入 Google 搜索的索引中，Google 将不能返回SiteSearch 结果。请注意将 SiteSearch 添加至任何网页，都不会使此网页进入我们漫游器的等待抓取队列。如果您希望采用手动方式将贵网站的主要网址添加到我们的抓取索引，则可以通过</p></li></ul><p><a href="http://www.google.com/intl/zh-CN/addurl.html" target="_blank" rel="noopener">http://www.google.com/intl/zh-CN/addurl.html</a><br>进行这一*作。采用这一方式提交贵网站不能确保网站一定会被加入到 Google 索引中。</p><ul><li>网站发布商或由发布商征召的第三方不得采用人为方式或通过漫游器产生欺诈性 点击（恶意点击）。点击自己网站上的广告有违此政策，所以请不要因任何原因点 击这些广告。我们会监控所有的 AdSense 活动，并且会停用违反此政策的任何发 布商的帐户。详细信息，请参阅 Google AdSense 条款，地址是： <a href="https://www.google.com/adsense/localized-terms?hl=zh_CN" target="_blank" rel="noopener">https://www.google.com/adsense/localized-terms?hl=zh_CN</a></li></ul><p>有什么问题？<br>请随时与我们联系，我们的电子邮件地址是 <a href="mailto:adsense-zhs@google.com" target="_blank" rel="noopener">adsense-zhs@google.com</a>。</p><p>欢迎光临 Google AdSense。我们热切期盼能够帮助您全面发挥贵网站的创收潜力。</p><p>Google 小组敬上</p><h2 id="三、登录设置，获取代码"><a href="#三、登录设置，获取代码" class="headerlink" title="三、登录设置，获取代码"></a>三、登录设置，获取代码</h2><p>为了让大家登录方便，首页放了个Google AdSense登录的地址，可以直接点击。</p><p>由于Google的中文意思表达不明确，并且Google对于很多细节都避而不谈，所以dan迷茫了两天。通过几天的试验和询问朋友，终于明白很多东西。</p><p>Google AdSense分为AdSense广告和AdSense搜索。AdSense广告就是放google的广告条；AdSense搜索就是提供个性化颜色的Google搜索，上面有时会出现广告条。也就是说，只有点击广告条才能赚钱，否则显示得再多也是徒劳！</p><p>进入“广告设置”栏目。可以设置“广告颜色”等细节，最后生成一段代码，比如</p><p>省略</p><p>然后你就粘贴到你的网页上就可以了。</p><p>在“搜索设置”栏目中，设置后又能得到一段代码<br>省略<br>同样，粘贴即可。</p><h2 id="四、上传网页"><a href="#四、上传网页" class="headerlink" title="四、上传网页"></a>四、上传网页</h2><p>上传后，并不能马上显示广告，有的可能要过段时间才行。有的则显示没有任何收入的公益广告！根据Google的流程来看是这样的：</p><p>网页执行JavaScript程序，Google服务器来抓当前的网页，然后Google服务器分析网页内容，在你的网页上显示相关的广告。看来Google AdSense的确很聪明。</p><h2 id="五、查询收入"><a href="#五、查询收入" class="headerlink" title="五、查询收入"></a>五、查询收入</h2><p>Google AdSense是每4个小时更新一次点击记录。加上美国时间比中国时间晚12小时，所以再查询时不要疑惑。前天有3个点击，前两个赚了0.44美元，第3个外国广告的点击居然有6美元！不过，昨天看了一下统计，居然变成了每个点击0.04美元。不知道Google的浮动算法是什么，Google对于AdSense的很多东西都是保密的。</p><h2 id="六、Google-AdSense支付"><a href="#六、Google-AdSense支付" class="headerlink" title="六、Google AdSense支付"></a>六、Google AdSense支付</h2><p>当你的广告费满100美元时，Google会寄支票给你。带上支票和身份证。另外带点钱（100元就够了），去中国银行办理光票托收手续（这种支票并不是那种凭身份证就能去银行取钱的那种，所以叫“光票”）。</p><p>首先，支票背面的指定位置需要你的签名，签名要和正面收款人的一致（别担心，银行工作人员都会告诉你的啦~~）；</p><p>其次，您需要向银行交纳一定的手续费和支票的邮寄费（支票要寄到国外银行）,所收费用根据各地情况而不同。邮寄费一般为10——12元人民币不等，手续费一般为支票金额的0.1%（不足10元按10元交纳）；</p><p>再次，留下您的联系电话，将收据收好，大约1个月之后，银行会电话通知您款已到帐。</p><p>最后，拿着您的收据和身份证再到外币柜台，这时您就可以见到您的美元了！（注：如果直接把美圆存到银行，要比把美圆取出，然后再存的利率要高一些~~）</p><p>注意：有的公司的支票是有有效期的，所以要尽快办理托收手续！比如，票面上标注“VOID AFTER 90 DAYS”表示支票在90天内有效。<br>七、疑问</p><p>Q: Google同意将代码放到多个网站上吗？<br>A: 虽然申请时填了一个网址，但是Google给了你一段代码，里面有你的 ID号，所以可以放在多个网站上。</p><p>Q: 如何避免Goolge的公益广告？<br>A: 公益广告是不可避免的，Google允许你在应该显示公益广告时换成你自己的广告</p><p>Google广告联盟是现在信誉最好的广告提供商之一。</p><p><a href="https://www.williamlong.info/tag/Adsense.html" target="_blank" rel="noopener">继续了解更多Google AdSense相关知识 …</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://www.williamlong.info/adsense/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.williamlong.info/adsense/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Goog
      
    
    </summary>
    
      <category term="网站开发" scheme="http://shenxf.top/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Google AdSense" scheme="http://shenxf.top/tags/Google-AdSense/"/>
    
      <category term="Google 广告" scheme="http://shenxf.top/tags/Google-%E5%B9%BF%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>hexo生成博文插入图片【转】</title>
    <link href="http://shenxf.top/2019/03/21/20190321/"/>
    <id>http://shenxf.top/2019/03/21/20190321/</id>
    <published>2019-03-21T07:03:30.000Z</published>
    <updated>2019-03-29T04:40:58.510Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">https://blog.csdn.net/sugar_rainbow/article/details/57415705</a></p><h2 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h2><p>十分痛苦，是因为突然发现上传的博客里面的图片居然显示不来，excuse me??? </p><p><img src="/2019/03/21/20190321/1.jpg" alt="吐血"></p><p>笋干shabi了<br>怎么办，上网google解决之道，然后又试了很多坑……. </p><p><img src="/2019/03/21/20190321/2.jpg" alt="这可咋整"></p><p>更加绝望了…..<br>然后，看到了这个：<a href="https://www.jianshu.com/p/c2ba9533088a" target="_blank" rel="noopener">dalao指导</a></p><p><img src="/2019/03/21/20190321/3.jpg" alt="我能怎么办"></p><p>hhhh，再试一次…..这里写图片描述</p><p>然而，居然可以了….excuse me??</p><p>好吧，总结一下这个牛批的解决办法：</p><p>First<br>1 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</p><p>2 在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p><p>3 等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹</p><p>Second<br>4 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p><p><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></p><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><p>5 最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/sugar_rainbow/article/details/57415705&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/sugar_ra
      
    
    </summary>
    
      <category term="博客" scheme="http://shenxf.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://shenxf.top/tags/hexo/"/>
    
      <category term="图片" scheme="http://shenxf.top/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>小沈的个人网站说明</title>
    <link href="http://shenxf.top/2019/03/04/hexo/"/>
    <id>http://shenxf.top/2019/03/04/hexo/</id>
    <published>2019-03-04T06:04:05.000Z</published>
    <updated>2019-04-23T05:55:15.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="契机和概要"><a href="#契机和概要" class="headerlink" title="契机和概要"></a>契机和概要</h2><ul><li><p>1.经历了长时间的前端学习，想把自己的学习成果展现出来，所以想做一个展示自己水平的个人博客网站。<br>一开始只要求能把成果做出来就行，后期可能着重点在画面的一些效果演示。<br>网站内容主要是分享一些个人经历，和技术文案。<br>预想的是前后台分离。后台主要提供接口和处理数据。前端主要是表示。    </p></li><li><p>2.用到的技术：    //TODO</p><ul><li>后端技术：Node.js</li><li>前端技术：Vue，less, html</li><li>服务：apache</li><li>部署：Docker</li><li>数据持久化：MySql</li></ul></li><li><p>3.实施计划    </p><ul><li>3-1.前期调查：根据github上面的网站，做一个自己的页面设计，最好有原型图    </li><li>3-2.制作前台页面和后台静态页面。    </li><li>3-3.设计表结构。    </li><li>3-4.开发阶段。    </li><li>3-5.调优阶段。    </li><li>3-6.发布。    </li><li>3-7.维护。    </li></ul></li><li><p>4.具体实施        //TODO</p><ul><li>4-1.前期调查    <ul><li>4-4-0.markdown文件的基本常用编写语法（图文并茂）。<ul><li><a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">MD学习</a></li></ul></li><li>4-4-1.参照网站查找。    <ul><li><a href="https://segmentfault.com/u/yuanzm/articles" target="_blank" rel="noopener">参照网站1</a></li><li><a href="https://yisha0307.github.io/Portfolio-page/chenyisha.html" target="_blank" rel="noopener">参照网站2</a></li><li><a href="http://www.flqin.com/" target="_blank" rel="noopener">参照网站3</a></li><li><a href="http://fangzh.top/" target="_blank" rel="noopener">fangzh</a><ul><li>4-4-2.原型图制作工具了解。    </li></ul></li><li><a href="http://www.woshipm.com/it/319902.html" target="_blank" rel="noopener">Axure工具下载</a></li><li><a href="https://modao.cc/" target="_blank" rel="noopener">墨刀</a> 它里面有很多都是现成的组件，直接布局拖动就好了</li><li>由于上述的学习需要一些时间，偏离主题，暂时只用用一些简单的工具来制作草图。不过多浪费时间在这上面。<br>等有时间了再来学习。<ul><li>4-4-4.制定基础要件，明确要做哪些范围。    <ul><li>前台</li><li>首页（logo）<ul><li>轮播图。</li></ul></li><li>学习作品展示<ul><li>作品列表。</li></ul></li><li>技术文章<ul><li>博客功能。</li><li>富文本编辑。</li></ul></li><li>在线留言<ul><li>在线留言功能。</li></ul></li><li>关于我<ul><li>联系方式。</li></ul></li></ul></li></ul></li><li>后台<ul><li>首页<ul><li>网站基本信息</li></ul></li><li>内容管理</li><li>系统管理</li></ul></li></ul></li><li>4-4-3.基础工程创建。    （预计5月底6月初开始）</li></ul></li></ul></li></ul><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul><li>标记TODO的地方以后会根据实际情况追加。    </li><li>一开始用http，最后要改成Https    </li><li>做2套画面，电脑和手机各一套，预计一年时间。先做PC端，手机端作为以后调优和维护的内容。    </li><li>预计访问量较低，不做分布式架构。    </li><li>PC端版心1170px。主题色：#87CEEB</li><li>考虑到SEO,前台页面用html加模板引擎，后台页面用VUE</li><li>不做浏览器兼容。最新的IE，Google，FireFox基本能使用就行。</li><li>考虑到周期太长，采用敏捷开发的思想，先做一个个人介绍的网站以后逐步追加新的内容</li><li>这周发现hexo这个博客简化工具，现阶段先使用<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">Hexo</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;契机和概要&quot;&gt;&lt;a href=&quot;#契机和概要&quot; class=&quot;headerlink&quot; title=&quot;契机和概要&quot;&gt;&lt;/a&gt;契机和概要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.经历了长时间的前端学习，想把自己的学习成果展现出来，所以想做一个展示自己水平的个人博客网站。&lt;
      
    
    </summary>
    
      <category term="网站开发" scheme="http://shenxf.top/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="博客" scheme="http://shenxf.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="前端" scheme="http://shenxf.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
