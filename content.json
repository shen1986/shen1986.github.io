{"meta":{"title":"小沈的个人博客","subtitle":"发表文章，自己的想法，学习分享","description":"用来总结自己学过的东西","author":"小沈","url":"http://shenxf.top","root":"/"},"pages":[{"title":"关于我","date":"2019-03-04T06:04:05.000Z","updated":"2019-03-22T03:11:09.173Z","comments":true,"path":"about/index.html","permalink":"http://shenxf.top/about/index.html","excerpt":"","text":"我的联系方式 QQ: 185693240 邮箱: shenxf1986@qq.com 地点: 上海 擅长: 前端 nodejs,react,vue,angular java 欢迎大家给我留言"}],"posts":[{"title":"less介绍","slug":"20190403-art-less","date":"2019-04-03T01:24:11.000Z","updated":"2019-04-03T01:46:19.999Z","comments":true,"path":"2019/04/03/20190403-art-less/","link":"","permalink":"http://shenxf.top/2019/04/03/20190403-art-less/","excerpt":"","text":"Less环境安装 安装nodejs 在部分win8系统当中无法安装 （解决办法的是 已管理员权限运行cmd然后再按写命令切换到安装包目录，直接命令执行） 安装完成nodejs之后 检测是否安装完成 node –v 查看版本 然后检测 npm是否自带 npm –v 查看版本 在线安装 然后 运行 npm install –g less (部分电脑要 sudo 管理权限) Lessc –v 查看版本 是否安装成功 也可以离线安装，一般没人这么做就不说了 学习less官网官网中文网中文非官网 Lessc less.less less.css 编译less文件成css 简介 CSS（层叠样式表）是一门历史悠久的标记性语言，同 HTML 一道，被广泛应用于万维网（World Wide Web）中。HTML 主要负责文档结构的定义，CSS 负责文档表现形式或样式的定义。 作为一门标记性语言，CSS 的语法相对简单，对使用者的要求较低，但同时也带来一些问题：CSS 需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码，造成这些困难的很大原因源于 CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。LESS 为 Web 开发者带来了福音，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，LESS 可以让我们用更少的代码做更多的事情。 LESS 原理及使用方式 本质上，LESS 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。LESS 并没有裁剪 CSS 原有的特性，更不是用来取代 CSS 的，而是在现有 CSS 语法的基础上，为 CSS 加入程序式语言的特性。 语法 变量 Mixin混入 嵌套 Import 函数（内置函数 运算） 变量 LESS 允许开发者自定义变量，变量可以在全局样式中使用，变量使得样式修改起来更加简单。12345/*-----------------变量-----------------*/@mainColor:#E93223;body&#123; color: @mainColor;&#125; Mixin混入 Mixin（混入）功能对用开发者来说并不陌生，很多动态语言都支持 Mixin（混入）特性，它是多重继承的一种实现，在 LESS 中，混入是指在一个 CLASS 中引入另外一个已经定义的 CLASS，就像在当前 CLASS 中增加一个属性一样。12345678910111213141516171819/*-----------------mixin 混入----------------*//*颜色*/.red&#123; color: @mainColor;&#125;.border&#123; border: 1px solid #ccc;&#125;.redBorder()&#123; color: @mainColor; border: 1px solid #ccc;&#125;.mixin-class&#123; .red(); .border();&#125;.mixin-fuc&#123; .redBorder();&#125; 嵌套 在我们书写标准 CSS 的时候，遇到多层的元素嵌套这种情况时，我们要么采用从外到内的选择器嵌套定义，要么采用给特定元素加 CLASS 或 ID 的方式123456789101112131415161718192021222324252627/*------------------嵌套------------------*//*轮播图*/#wjs_banner&#123; .carousel-inner&#123; &gt; div.item&#123; a.img_box&#123; background: url(\"../images/slide_01_2000x410.jpg\") no-repeat center center; height: 410px; /*调用redBorder mixin*/ display: block; .redBorder(); /*调用@mainColor 变量*/ &amp;:hover&#123; color: @mainColor; &#125; &#125; a.img_mobile&#123; width: 100%; display: block; img&#123; width: 100%; display: block; &#125; &#125; &#125; &#125;&#125; Import 导入12345/*---------------------Import 引入------------------------*/@import \"base\";.f_left&#123; float: @right;&#125; 运算及函数 在我们的 CSS 中充斥着大量的数值型的 value，比如 color、padding、margin 等，这些数值之间在某些情况下是有着一定关系的，那么我们怎样利用 LESS 来组织我们这些数值之间的关系呢？ http://www.1024i.com/demo/less/reference.html 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071escape(@string); // 通过 URL-encoding 编码字符串e(@string); // 对字符串转义%(@string, values...); // 格式化字符串unit(@dimension, [@unit: \"\"]); // 移除或替换属性值的单位color(@string); // 将字符串解析为颜色值data-uri([mimetype,] url); // * 将资源内嵌到css中，可能回退到url()ceil(@number); // 向上取整floor(@number); // 向下取整percentage(@number); // 将数字转换为百分比，例如 0.5 -&gt; 50%round(number, [places: 0]); // 四舍五入取整sqrt(number); // * 计算数字的平方根abs(number); // * 数字的绝对值sin(number); // * sin函数asin(number); // * arcsin函数cos(number); // * cos函数acos(number); // * arccos函数tan(number); // * tan函数atan(number); // * arctan函数pi(); // * 返回PIpow(@base, @exponent); // * 返回@base的@exponent次方mod(number, number); // * 第一个参数对第二个参数取余convert(number, units); // * 在数字之间转换unit(number, units); // * 不转换的情况下替换数字的单位color(string); // 将字符串或者转义后的值转换成颜色rgb(@r, @g, @b); // 转换为颜色值rgba(@r, @g, @b, @a); // 转换为颜色值argb(@color); // 创建 #AARRGGBB 格式的颜色值hsl(@hue, @saturation, @lightness); // 创建颜色值hsla(@hue, @saturation, @lightness, @alpha); // 创建颜色值hsv(@hue, @saturation, @value); // 创建颜色值hsva(@hue, @saturation, @value, @alpha); // 创建颜色值hue(@color); // 从颜色值中提取 hue 值（色相）saturation(@color); // 从颜色值中提取 saturation 值（饱和度）lightness(@color); // 从颜色值中提取 'lightness' 值（亮度）hsvhue(@color); // * 从颜色中提取 hue 值，以HSV色彩空间表示（色相）hsvsaturation(@color); // * 从颜色中提取 saturation 值，以HSV色彩空间表示（饱和度）hsvvalue(@color); // * 从颜色中提取 value 值，以HSV色彩空间表示（色调）red(@color); // 从颜色值中提取 'red' 值（红色）green(@color); // 从颜色值中提取 'green' 值（绿色）blue(@color); // 从颜色值中提取 'blue' 值（蓝色）alpha(@color); // 从颜色值中提取 'alpha' 值（透明度）luma(@color); // 从颜色值中提取 'luma' 值（亮度的百分比表示法）saturate(@color, 10%); // 饱和度增加 10%desaturate(@color, 10%); // 饱和度降低 10%lighten(@color, 10%); // 亮度增加 10%darken(@color, 10%); // 亮度降低 10%fadein(@color, 10%); // 透明度增加 10%fadeout(@color, 10%); // 透明度降低 10%fade(@color, 50%); // 设定透明度为 50%spin(@color, 10); // 色相值增加 10mix(@color1, @color2, [@weight: 50%]); // 混合两种颜色greyscale(@color); // 完全移除饱和度，输出灰色contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]); // 如果 @color1 的 luma 值 &gt; 43% 输出 @darkcolor，否则输出 @lightcolormultiply(@color1, @color2);screen(@color1, @color2);overlay(@color1, @color2);softlight(@color1, @color2);hardlight(@color1, @color2);difference(@color1, @color2);exclusion(@color1, @color2);average(@color1, @color2);negation(@color1, @color2);iscolor(@colorOrAnything); // 判断一个值是否是颜色isnumber(@numberOrAnything); // 判断一个值是否是数字（可含单位）isstring(@stringOrAnything); // 判断一个值是否是字符串iskeyword(@keywordOrAnything); // 判断一个值是否是关键字isurl(@urlOrAnything); // 判断一个值是否是urlispixel(@pixelOrAnything); // 判断一个值是否是以px为单位的数值ispercentage(@percentageOrAnything); // 判断一个值是否是百分数isem(@emOrAnything); // 判断一个值是否是以em为单位的数值isunit(@numberOrAnything, \"rem\"); // * 判断一个值是否是指定单位的数值 例子 1234567/*-------------------运算和函数--------------------------*/@back:#333;.test&#123; border: 1px solid @back*2; background: lighten(#000, 10%); color:darken(#000, 10%);&#125; Less在浏览器上使用的方法 请参照官网，less提供了js文件，能够在html里面直接运行less，但是这是有代价的，会有一定的编译开销，一般用在开发或则学习的时候，作为产品最好不要这么用。 样式部分 1&lt;link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\" /&gt; script部分 1&lt;script src=\"less.js\" type=\"text/javascript\"&gt;&lt;/script&gt;","categories":[{"name":"文章","slug":"文章","permalink":"http://shenxf.top/categories/文章/"}],"tags":[{"name":"less","slug":"less","permalink":"http://shenxf.top/tags/less/"},{"name":"less环境安装","slug":"less环境安装","permalink":"http://shenxf.top/tags/less环境安装/"},{"name":"less语法","slug":"less语法","permalink":"http://shenxf.top/tags/less语法/"},{"name":"Mixin","slug":"Mixin","permalink":"http://shenxf.top/tags/Mixin/"}]},{"title":"hexo教程：github page+独立域名搭建(1)","slug":"20190402-hexo-blog1","date":"2019-04-02T02:07:57.000Z","updated":"2019-04-02T02:29:52.609Z","comments":true,"path":"2019/04/02/20190402-hexo-blog1/","link":"","permalink":"http://shenxf.top/2019/04/02/20190402-hexo-blog1/","excerpt":"","text":"现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。 而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。 那么就有第三种选择，直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。 Hexo简介 Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 Hexo搭建步骤 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 将hexo部署到GitHub 设置个人域名 发布文章 1. 安装Git Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程 windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码 1sudo apt-get install git 安装好后，用git –version 来查看一下版本 2. 安装nodejs Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。 windows：nodejs选择LTS版本就行了。 linux： 12sudo apt-get install nodejssudo apt-get install npm 安装完后，打开命令行 12node -vnpm -v 检查一下有没有安装成功 顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。 3. 安装hexo 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 输入命令 1npm install -g hexo-cli 依旧用hexo -v查看一下版本 至此就全部安装完了。 接下来初始化一下hexo 1hexo init myblog 这个myblog可以自己取什么名字都行，然后 12cd myblog //进入这个myblog文件夹npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件12hexo ghexo server 打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。 大概长这样： 使用ctrl+c可以把服务关掉。 4. GitHub创建个人仓库 首先，你先要有一个GitHub账户，去注册一个吧。 注册完登录后，在GitHub.com中看到一个New repository，新建仓库 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。 点击create repository。 5. 生成SSH添加到GitHub 回到你的git bash中， 12git config --global user.name \"yourname\"git config --global user.email \"youremail\" 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 可以用以下两条，检查一下你有没有输对 12git config user.namegit config user.email 然后创建SSH,一路回车 1ssh-keygen -t rsa -C \"youremail\" 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去。 在gitbash中，查看是否成功 1ssh -T git@github.com 6. 将hexo部署到GitHub 这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为 YourgithubName就是你的GitHub账户 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 然后 123hexo cleanhexo generatehexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写 hexo deploy 部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 得到下图就说明部署成功了，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！ 7. 设置个人域名 现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。 注册一个阿里云账户,在阿里云上买一个域名，我买的是 fangzh.top，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。 你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。 点解析进去，添加解析。 其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。 注意，解析线路选择默认，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择默认！！ 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名fangzh.top 然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。 最后，在gitbash中，输入 123hexo cleanhexo ghexo d 过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！ 接下来你就可以正式开始写文章了。 1hexo new newpapername 然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再 123hexo cleanhexo ghexo d 就可以看到更新了。 至于更换网站主题，还有添加各种各样的功能等等，在往后的系列博客中，再进行介绍。","categories":[{"name":"博客","slug":"博客","permalink":"http://shenxf.top/categories/博客/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://shenxf.top/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://shenxf.top/tags/博客/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://shenxf.top/tags/博客搭建/"},{"name":"教程","slug":"教程","permalink":"http://shenxf.top/tags/教程/"},{"name":"blog","slug":"blog","permalink":"http://shenxf.top/tags/blog/"}]},{"title":"使用 typeScript 开发的搭配","slug":"20190401-nodejs-typeScript","date":"2019-04-01T09:31:35.000Z","updated":"2019-04-01T09:39:31.624Z","comments":true,"path":"2019/04/01/20190401-nodejs-typeScript/","link":"","permalink":"http://shenxf.top/2019/04/01/20190401-nodejs-typeScript/","excerpt":"","text":"在 TypeScript 代码中看到后台编程的一些影子，它是 javaScript 的升华。所以借学习 TypeScript 的机会再回过头来看如何在 Node 中用它来开发。 一、配置环境1.1、 建立 node 项目 使用终端工具，在项目的根目录（注意是空目录）中执行“npm init -y”命令创建一个“package.json”的文件，文件中的基本信息为： 1234567891011121314&#123; \"name\": \"nodejs\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": &#123; // npm run start \"start\": \"node ./build/hello\", \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" &#125;, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\"&#125; 接着引入 node 的运行定义文件，引入的命令是“npm i @types/node –save”。 npm 不加配置的话是原生镜像地址，会涉及翻墙的问题，使用以下淘宝镜像可解决： 12npm install @types/node --registry=http://registry.npm.taobao.orgnpm install typescript --registry=http://registry.npm.taobao.org 1.2、创建“tsconfig.json” node 本身是不认 typeScript 语言的，所以要将 typeScript 编译成 javaScript，所以在项目的根目录就要创建一个“tsconfig.json”，这个文件是用来告诉编译器如何将 typeScript 编译成 javaScript。 12345678910111213141516171819202122232425262728293031323334&#123; // 编译器的配置 \"compilerOptions\": &#123; // 指定生成哪个模块系统代码 \"module\": \"commonjs\", // 目标代码类型 \"target\": \"es5\", // emitDecoratorMetadata 和 experimentalDecorators 是与装饰器相关的 // 在编译的时候保留装饰器里面的原数据 \"emitDecoratorMetadata\": true, \"experimentalDecorators\": true, // 在表达式和声明上有隐含的'any'类型时报错。 \"noImplicitAny\": false, // 用于debug \"sourceMap\": false, // 仅用来控制输出的目录结构--outDir。 \"rootDir\": \"./src\", // 编译完后要放在哪个文件夹里面 \"outDir\": \"./build\", // 在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。 \"watch\": true, // 开发的时候要使用 es6 的语法 \"lib\": [\"es6\"] &#125;, \"include\": [ \"./src/**/*\" ], // 排除编译的时候哪些个文件要排除掉 \"exclude\": [ \"node_modules\" \"views\", \"static\" ]&#125; 在编辑完“tsconfig.json”之后，如果你使用的也是 WebStorm 编辑器，通过“setting”来设置让 IDE 知道要使用这个配置文件作为配置来编译 TypeScript 。 二、测试项目的正常启动2.1、在“src/hello.ts”中输入代码123456import * as http from 'http';const server = http.createServer((req, res)=&gt;&#123; res.end('Hello Node!');&#125;);server.listen(3000); 2.2、在终端中输入启动服务命令node build/hello.js 2.3、在浏览器中输入“http://localhost:3000/”运行后的效果 三、简单的路由3.1、引入“express”依赖库1npm install express --save 3.2、在入口的 TS 文件里面输入代码123456789101112131415// 入口import * as express from 'express';const app = express();app.get('/', (req, res) =&gt; res.end('This is Home!'));app.get('/users', (req, res) =&gt; res.end('This is User!'));const port = 3000;const host = 'localhost';const serv = app.listen(port, host, () =&gt; &#123; console.log(`server start, address: http://$&#123;host&#125;:$&#123;port&#125;`);&#125;); 3.3、简单的传参路由12345678910111213141516171819202122232425262728293031323334353637// 入口import * as express from 'express';import * as path from 'path';import * as bodyParser from 'body-parser';const app = express();// parse application/jsonapp.use(bodyParser.json());// 静态资源文件，例如图片、CSS、JavaScript 文件等app.use(express.static(path.join(__dirname, 'static')));app.get('/', (req, res) =&gt; res.end('This is home!'));app.get('/users', (req, res) =&gt; &#123; res.json(users);&#125;);app.get('/users/:id', (req, res) =&gt; &#123; res.json(users.find((user)=&gt;user.id == req.params.id));&#125;);const serv = app.listen(3000, ()=&gt;&#123; const host = serv.address().address; const port = serv.address().port; console.log(`server start, address: http://$&#123;host&#125;:$&#123;port&#125;`);&#125;);export class User &#123; constructor(public id: number, public name: string) &#123;&#125;&#125;const users: User[] = [ new User(1, '张三'), new User(2, '李四'), new User(3, '王五'),];","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://shenxf.top/categories/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://shenxf.top/tags/nodejs/"},{"name":"typescript","slug":"typescript","permalink":"http://shenxf.top/tags/typescript/"}]},{"title":"工作中 99% 能用到的 git 命令","slug":"20190401-gitCommand","date":"2019-04-01T04:42:37.000Z","updated":"2019-04-01T04:47:54.181Z","comments":true,"path":"2019/04/01/20190401-gitCommand/","link":"","permalink":"http://shenxf.top/2019/04/01/20190401-gitCommand/","excerpt":"","text":"分支操作 git branch：创建分支 git branch -b：创建并切换到新建的分支上 git checkout：切换分支 git branch：查看分支列表 git branch -v：查看所有分支的最后一次操作 git branch -vv：查看当前分支 git brabch -b 分支名 origin/分支名：创建远程分支到本地 git branch –merged：查看别的分支和当前分支合并过的分支 git branch –no-merged：查看未与当前分支合并的分支 git branch -d 分支名：删除本地分支 git branch -D 分支名：强行删除分支 git branch origin 分支名：删除远处仓库分支 git merge 分支名：合并分支到当前分支上 暂存操作 git stash：暂存当前修改 git stash apply：恢复最近的一次暂存 git stash pop：恢复暂存并删除暂存记录 git stash list：查看暂存列表 git stash drop 暂存名(例：stash@{0})：移除某次暂存 git stash clear：清除暂存 回退操作 git reset –hard HEAD^：回退到上一个版本 git reset –hard ahdhs1(commit_id)：回退到某个版本 git checkout – file：撤销修改的文件（如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态） git reset HEAD file：撤回暂存区的文件修改到工作区 标签操作 git tag 标签名：添加标签(默认对当前版本) git tag 标签名 commit_id：对某一提交记录打标签 git tag -a 标签名 -m ‘描述’：创建新标签并增加备注 git tag：列出所有标签列表 git show 标签名：查看标签信息 git tag -d 标签名：删除本地标签 git push origin 标签名：推送标签到远程仓库 git push origin –tags：推送所有标签到远程仓库 git push origin :refs/tags/标签名：从远程仓库中删除标签 常规操作 git push origin test：推送本地分支到远程仓库 git rm -r –cached 文件/文件夹名字：取消文件被版本控制 git reflog：获取执行过的命令 git log –graph：查看分支合并图 git merge –no-ff -m ‘合并描述’ 分支名：不使用Fast forward方式合并，采用这种方式合并可以看到合并记录 git check-ignore -v 文件名：查看忽略规则 git add -f 文件名：强制将文件提交 git创建项目仓库 git init：初始化 git remote add origin url：关联远程仓库 git pull git fetch：获取远程仓库中所有的分支到本地 忽略已加入到版本库中的文件 git update-index –assume-unchanged file：忽略单个文件 取消忽略文件 git update-index –no-assume-unchanged file 拉取. 上传免密码 git config –global credential.helper store","categories":[{"name":"文章","slug":"文章","permalink":"http://shenxf.top/categories/文章/"}],"tags":[{"name":"git","slug":"git","permalink":"http://shenxf.top/tags/git/"},{"name":"命令","slug":"命令","permalink":"http://shenxf.top/tags/命令/"},{"name":"commond","slug":"commond","permalink":"http://shenxf.top/tags/commond/"}]},{"title":"Node.js 入门系列1","slug":"20190401-nodejs-Introduction1","date":"2019-04-01T03:10:21.000Z","updated":"2019-04-01T04:36:09.773Z","comments":true,"path":"2019/04/01/20190401-nodejs-Introduction1/","link":"","permalink":"http://shenxf.top/2019/04/01/20190401-nodejs-Introduction1/","excerpt":"","text":"总结1 Node.js 是什么 JavaScript 运行时 既不是语言，也不是框架，它是一个平台 Node.js 中的 JavaScript 没有 BOM、DOM EcmaScript 基本的 JavaScript 语言部分 在 Node 中为 JavaScript 提供了一些服务器级别的 API 文件操作的能力 http 服务的能力 总结2 Node 中的 JavaScript EcmaScript 变量 方法 数据类型 内置对象 Array Object Date Math 模块系统 在 Node 中没有全局作用域的概念 在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件 require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题 模块完全是封闭的 外部无法访问内部 内部也无法访问外部 模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题 但是某些情况下，模块与模块是需要进行通信的 在每个模块中，都提供了一个对象：exports 该对象默认是一个空对象 你要做的就是把需要被外部访问使用的成员手动的挂载到 exports 接口对象中 然后谁来 require 这个模块，谁就可以得到模块内部的 exports 接口对象 还有其它的一些规则，具体后面讲，以及如何在项目中去使用这种编程方式，会通过后面的案例来处理 核心模块 核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如 fs 文件操作模块 http 网络服务构建模块 os 操作系统信息模块 path 路径处理模块 。。。。 所有核心模块在使用的时候都必须手动的先使用 require 方法来加载，然后才可以使用，例如： var fs = require(&#39;fs&#39;) http require 端口号 ip 地址定位计算机 端口号定位具体的应用程序 Content-Type 服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉 不同的资源对应的 Content-Type 是不一样，具体参照：http://tool.oschina.net/commons 对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题 通过网络发送文件 发送的并不是文件，本质上来讲发送是文件的内容 当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理 模块系统 Node 中的其它的核心模块 Express Web 开发框架 npm install express","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://shenxf.top/categories/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://shenxf.top/tags/nodejs/"},{"name":"入门系列1","slug":"入门系列1","permalink":"http://shenxf.top/tags/入门系列1/"}]},{"title":"Hexo百度主动提交链接","slug":"20190329-seo","date":"2019-03-29T04:39:29.000Z","updated":"2019-03-29T05:06:25.467Z","comments":true,"path":"2019/03/29/20190329-seo/","link":"","permalink":"http://shenxf.top/2019/03/29/20190329-seo/","excerpt":"","text":"首先可以你需要了解下百度站长平台页面抓取栏的推送说明 上个效果图： 以下两种方式都可以推送，可以使用其中一种，也可以两种都使用 自动推送 一般在目录blog\\themes\\hiker\\layout_partial\\head.ejs中加入JS，这样全站都有了： 1234567891011121314&lt;script&gt;(function()&#123; var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') &#123; bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; &#125; else &#123; bp.src = 'http://push.zhanzhang.baidu.com/push.js'; &#125; var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt; 主动推送 感谢作者：https://github.com/huiwang/hexo-baidu-url-submit 作用：某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。除此之外， 使用主动推送还会达到如下功效： 及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录 保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现 安装hexo-baidu-url-submit插件 首先，在Hexo根目录下，安装本插件： 1npm install hexo-baidu-url-submit --save 请注意， 本插件的配置文件中包含秘钥， 请把您的Hexo博客源文件托管到私有仓库里。 配置_config.yml文件 同样在根目录下，把以下内容配置到_config.yml文件中:12345baidu_url_submit: count: 3 ## 比如3，代表提交最新的三个链接 host: shenxf.top ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 检查url 其次，记得查看_config.yml文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如: 1234# URLurl: http://shenxf.toproot: /permalink: :year/:month/:day/:title/ 最后，加入新的deployer: 12345deploy:- type: git repo: coding: https://用户名:密码@git.coding.net/TinyJay/blog.git,master- type: baidu_url_submitter 执行hexo deploy的时候，新的链接就会被推送了。 实现原理 推送功能的实现，分为两部分： 新链接的产生，hexo generate会产生一个文本文件，里面包含最新的链接 新链接的提交，hexo deploy会从上述文件中读取链接，提交至百度搜索引擎。 链接参考：http://guoyanjun.top/","categories":[{"name":"博客","slug":"博客","permalink":"http://shenxf.top/categories/博客/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://shenxf.top/tags/Hexo/"},{"name":"百度主动提交链接","slug":"百度主动提交链接","permalink":"http://shenxf.top/tags/百度主动提交链接/"},{"name":"seo","slug":"seo","permalink":"http://shenxf.top/tags/seo/"}]},{"title":"使用vscode时，如何在.vue文件中使用html代码补全功能","slug":"article","date":"2019-03-26T01:58:54.000Z","updated":"2019-03-26T02:03:26.511Z","comments":true,"path":"2019/03/26/article/","link":"","permalink":"http://shenxf.top/2019/03/26/article/","excerpt":"","text":"使用vscode编写vue代码，刚开始点击tab是不会自动补全代码的，这个就很郁闷了。百度了半天：https://segmentfault.com/a/1190000010339485 参考这个最后解决了问题 一、HTML Snippets 在vscode中把这个插件下载了并且启用，然后翻阅插件的ReadMe，我们可以看到如下图得FAQ: 这段代码是提示我们需要在settings.json中配置files.associations的属性。 二、settings.json中配置files.associations对象 首先，依次打开“文件 –&gt; 首选项 –&gt; 设置”，就会看到settings.json文件了 然后在settings.json中找到“常用设置”里的files.associations对象 然后把鼠标滑到对象的左边，会出现如图所示的一个“编辑”的标志，点击它，就会打开右边编辑页，如图： 按照上图的步骤去配置就可以了，然后再回到.vue的页面，打出div，再按住tab键，就可以自动补全代码了，这里只用写最后一句话就可以了 可以看到也出现了代码提示功能，你可以选择一个自己想要的，也可以不选，直接按住tab键，就可以生成&lt;p&gt;&lt;/p&gt;了，如下图： 之后的设置","categories":[{"name":"文章","slug":"文章","permalink":"http://shenxf.top/categories/文章/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"http://shenxf.top/tags/vscode/"},{"name":"html代码补全功能","slug":"html代码补全功能","permalink":"http://shenxf.top/tags/html代码补全功能/"}]},{"title":"Google Adsense(谷歌网站联盟)广告申请指南","slug":"201903211","date":"2019-03-21T09:35:35.000Z","updated":"2019-03-29T05:03:26.249Z","comments":true,"path":"2019/03/21/201903211/","link":"","permalink":"http://shenxf.top/2019/03/21/201903211/","excerpt":"","text":"原文链接：https://www.williamlong.info/adsense/ Google AdSense 是一种获取收入的快速简便的方法，适合于各种规模的网站发布商。它可以在网站的内容网页上展示相关性较高的 Google 广告，并且这些广告不会过分夸张醒目。由于所展示的广告同用户在您的网站上查找的内容相关，因此，最终您的内容网页不仅会为您带来经济效益，还能够得以充实。 一、注册Google AdSense如果以前注册过Google AdWords（Google广告词——对关键字进行右侧付费推广）那么就能使用您的Google AdWords密码登录，开通Google AdSense了。 Google提示不支持中文，注册时填写拼音 需要填写 您输入的帐户信息如下：（XX代表隐藏站长的信息） 收款人：Wang Xiaobo或Xiaobo Wang（这个信息一定不能错，一旦提交永远不得更改。姓、名顺序可以按中文习惯，也可以按英语习惯颠倒过来）地址：Room 102, Building 3地址（延续）：Hua Xi Cun 2#城市：Nanjing州、省或地区：Jiangsu邮政编码：210000国家/地区：中国电话：+86-25-85412654（注意：国家代码和区号前不要加0）产品：AdSense for content（针对内容的AdSense）和AdSense for search（针对搜索的AdSense）网站：www.XXX.com网站语言：中文（简体） 请在继续前确认所有信息都是正确的。在此之后不能更改付款人姓名或国家/地区名称。 二、等待Google来信等了两天，Google来信如下： 标题：欢迎光临_Google_AdSense祝贺您！ 您的 Google AdSense 申请已得到批准。现在，您可以启用帐户，几分钟后就会开始向您的网站投放 Google 广告和提供 AdSense for search （针对搜索的AdSense）。 第 1 步：启用帐户。请访问 https://www.google.com/adsense?hl=zh_CN，然后使用申请中所提交的电子邮件地址和密码登录到自己的帐户，并选择同意 AdSense 条款。 第 2 步：将 AdSense 代码粘贴到您的网页。只需按照“广告布局代码”页和“搜索代码”页中的说明进行*作，即可将 Google 代码复制并粘贴到您的网站中。几分钟后就会开始向您的网站投放 Google 广告和提供 AdSense for search。 第 3 步：查看结果。广告开始投放后，您就可以通过自己帐户中的在线报告随时查看收入情况。请注意，如果您的网站中包含以下任一内容，都有可能无法从 AdSense 中获得最大收入： robots.txt 框架 表单与动态内容 过多的图像 要求登录和输入密码 有关针对此计划优化网站的更多技术指南与建议，请访问：https://www.google.com/adsense/faq-tech?hl=zh_CN 重要注意事项： 如果 Google 尚未抓取您的网站，则可能需要数小时才能看到有针对性的广告。您在此期间可能会看到公益广告（这些广告无法为您带来任何收入）。 如果您的网页还未列入 Google 搜索的索引中，Google 将不能返回SiteSearch 结果。请注意将 SiteSearch 添加至任何网页，都不会使此网页进入我们漫游器的等待抓取队列。如果您希望采用手动方式将贵网站的主要网址添加到我们的抓取索引，则可以通过 http://www.google.com/intl/zh-CN/addurl.html进行这一*作。采用这一方式提交贵网站不能确保网站一定会被加入到 Google 索引中。 网站发布商或由发布商征召的第三方不得采用人为方式或通过漫游器产生欺诈性 点击（恶意点击）。点击自己网站上的广告有违此政策，所以请不要因任何原因点 击这些广告。我们会监控所有的 AdSense 活动，并且会停用违反此政策的任何发 布商的帐户。详细信息，请参阅 Google AdSense 条款，地址是： https://www.google.com/adsense/localized-terms?hl=zh_CN 有什么问题？请随时与我们联系，我们的电子邮件地址是 adsense-zhs@google.com。 欢迎光临 Google AdSense。我们热切期盼能够帮助您全面发挥贵网站的创收潜力。 Google 小组敬上 三、登录设置，获取代码为了让大家登录方便，首页放了个Google AdSense登录的地址，可以直接点击。 由于Google的中文意思表达不明确，并且Google对于很多细节都避而不谈，所以dan迷茫了两天。通过几天的试验和询问朋友，终于明白很多东西。 Google AdSense分为AdSense广告和AdSense搜索。AdSense广告就是放google的广告条；AdSense搜索就是提供个性化颜色的Google搜索，上面有时会出现广告条。也就是说，只有点击广告条才能赚钱，否则显示得再多也是徒劳！ 进入“广告设置”栏目。可以设置“广告颜色”等细节，最后生成一段代码，比如 省略 然后你就粘贴到你的网页上就可以了。 在“搜索设置”栏目中，设置后又能得到一段代码省略同样，粘贴即可。 四、上传网页上传后，并不能马上显示广告，有的可能要过段时间才行。有的则显示没有任何收入的公益广告！根据Google的流程来看是这样的： 网页执行JavaScript程序，Google服务器来抓当前的网页，然后Google服务器分析网页内容，在你的网页上显示相关的广告。看来Google AdSense的确很聪明。 五、查询收入Google AdSense是每4个小时更新一次点击记录。加上美国时间比中国时间晚12小时，所以再查询时不要疑惑。前天有3个点击，前两个赚了0.44美元，第3个外国广告的点击居然有6美元！不过，昨天看了一下统计，居然变成了每个点击0.04美元。不知道Google的浮动算法是什么，Google对于AdSense的很多东西都是保密的。 六、Google AdSense支付当你的广告费满100美元时，Google会寄支票给你。带上支票和身份证。另外带点钱（100元就够了），去中国银行办理光票托收手续（这种支票并不是那种凭身份证就能去银行取钱的那种，所以叫“光票”）。 首先，支票背面的指定位置需要你的签名，签名要和正面收款人的一致（别担心，银行工作人员都会告诉你的啦~~）； 其次，您需要向银行交纳一定的手续费和支票的邮寄费（支票要寄到国外银行）,所收费用根据各地情况而不同。邮寄费一般为10——12元人民币不等，手续费一般为支票金额的0.1%（不足10元按10元交纳）； 再次，留下您的联系电话，将收据收好，大约1个月之后，银行会电话通知您款已到帐。 最后，拿着您的收据和身份证再到外币柜台，这时您就可以见到您的美元了！（注：如果直接把美圆存到银行，要比把美圆取出，然后再存的利率要高一些~~） 注意：有的公司的支票是有有效期的，所以要尽快办理托收手续！比如，票面上标注“VOID AFTER 90 DAYS”表示支票在90天内有效。七、疑问 Q: Google同意将代码放到多个网站上吗？A: 虽然申请时填了一个网址，但是Google给了你一段代码，里面有你的 ID号，所以可以放在多个网站上。 Q: 如何避免Goolge的公益广告？A: 公益广告是不可避免的，Google允许你在应该显示公益广告时换成你自己的广告 Google广告联盟是现在信誉最好的广告提供商之一。 继续了解更多Google AdSense相关知识 …","categories":[{"name":"网站开发","slug":"网站开发","permalink":"http://shenxf.top/categories/网站开发/"}],"tags":[{"name":"Google AdSense","slug":"Google-AdSense","permalink":"http://shenxf.top/tags/Google-AdSense/"},{"name":"Google 广告","slug":"Google-广告","permalink":"http://shenxf.top/tags/Google-广告/"}]},{"title":"hexo生成博文插入图片【转】","slug":"20190321","date":"2019-03-21T07:03:30.000Z","updated":"2019-03-29T04:40:58.510Z","comments":true,"path":"2019/03/21/20190321/","link":"","permalink":"http://shenxf.top/2019/03/21/20190321/","excerpt":"","text":"原文链接：https://blog.csdn.net/sugar_rainbow/article/details/57415705 RT十分痛苦，是因为突然发现上传的博客里面的图片居然显示不来，excuse me??? 笋干shabi了怎么办，上网google解决之道，然后又试了很多坑……. 更加绝望了…..然后，看到了这个：dalao指导 hhhh，再试一次…..这里写图片描述 然而，居然可以了….excuse me?? 好吧，总结一下这个牛批的解决办法： First1 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 2 在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git 3 等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹 Second4 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片： ![你想输入的替代文字](xxxx/图片名.jpg) 注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。 5 最后检查一下，hexo g生成页面后，进入public\\2017\\02\\26\\index.html文件中查看相关字段，可以发现，html标签内的语句是&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;，而不是&lt;img src=&quot;xxxx/图片名.jpg&gt;。这很重要，关乎你的网页是否可以真正加载你想插入的图片。","categories":[{"name":"博客","slug":"博客","permalink":"http://shenxf.top/categories/博客/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://shenxf.top/tags/hexo/"},{"name":"图片","slug":"图片","permalink":"http://shenxf.top/tags/图片/"}]},{"title":"小沈的个人网站说明","slug":"hexo","date":"2019-03-04T06:04:05.000Z","updated":"2019-03-22T03:12:41.429Z","comments":true,"path":"2019/03/04/hexo/","link":"","permalink":"http://shenxf.top/2019/03/04/hexo/","excerpt":"","text":"契机和概要 1.经历了长时间的前端学习，想把自己的学习成果展现出来，所以想做一个展示自己水平的个人博客网站。一开始只要求能把成果做出来就行，后期可能着重点在画面的一些效果演示。网站内容主要是分享一些个人经历，和技术文案。预想的是前后台分离。后台主要提供接口和处理数据。前端主要是表示。 2.用到的技术： //TODO 后端技术：Node.js 前端技术：Vue，less, html 服务：apache 部署：Docker 数据持久化：MySql 3.实施计划 3-1.前期调查：根据github上面的网站，做一个自己的页面设计，最好有原型图 3-2.制作前台页面和后台静态页面。 3-3.设计表结构。 3-4.开发阶段。 3-5.调优阶段。 3-6.发布。 3-7.维护。 4.具体实施 //TODO 4-1.前期调查 4-4-0.markdown文件的基本常用编写语法（图文并茂）。 MD学习 4-4-1.参照网站查找。 参照网站1 参照网站2 参照网站3 fangzh 4-4-2.原型图制作工具了解。 Axure工具下载 墨刀 它里面有很多都是现成的组件，直接布局拖动就好了 由于上述的学习需要一些时间，偏离主题，暂时只用用一些简单的工具来制作草图。不过多浪费时间在这上面。等有时间了再来学习。 4-4-4.制定基础要件，明确要做哪些范围。 前台 首页（logo） 轮播图。 学习作品展示 作品列表。 技术文章 博客功能。 富文本编辑。 在线留言 在线留言功能。 关于我 联系方式。 后台 首页 网站基本信息 内容管理 系统管理 4-4-3.基础工程创建。 （预计5月底6月初开始） 补充说明 标记TODO的地方以后会根据实际情况追加。 一开始用http，最后要改成Https 做2套画面，电脑和手机各一套，预计一年时间。先做PC端，手机端作为以后调优和维护的内容。 预计访问量较低，不做分布式架构。 PC端版心1170px。主题色：#87CEEB 考虑到SEO,前台页面用html加模板引擎，后台页面用VUE 不做浏览器兼容。最新的IE，Google，FireFox基本能使用就行。 考虑到周期太长，采用敏捷开发的思想，先做一个个人介绍的网站以后逐步追加新的内容 这周发现hexo这个博客简化工具，现阶段先使用Hexo","categories":[{"name":"网站开发","slug":"网站开发","permalink":"http://shenxf.top/categories/网站开发/"},{"name":"项目计划","slug":"网站开发/项目计划","permalink":"http://shenxf.top/categories/网站开发/项目计划/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://shenxf.top/tags/博客/"},{"name":"前端","slug":"前端","permalink":"http://shenxf.top/tags/前端/"}]}]}